<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd"
[
  <!ENTITY % all.entities SYSTEM "../all-entities.ent">
  %all.entities;
]
>
<chapter id="configuringnagios-configmain" xreflabel="Main Configuration File Options">
  <title>Main Configuration File Options</title>

  <note>
    <para>When creating and/or editing configuration files, keep the following in 
mind:</para>

    <itemizedlist>
      <listitem>
        <para>Lines that start with a '<computeroutput>#</computeroutput>' character are 
taken to be comments and are not processed
	</para>
      </listitem>

      <listitem>
        <para>Variables names must begin at the start of the line - no white space is 
allowed before the name
	</para>
      </listitem>

      <listitem>
        <para>Variable names are case-sensitive</para>
      </listitem>
    </itemizedlist>
  </note>

  <section>
    <title>Sample Configuration File</title>

    <tip>
      <para>A sample main configuration file 
(<filename>/usr/local/nagios/etc/nagios.cfg</filename>) is installed for you 
when you follow the <xref linkend="gettingstarted-quickstart" />.
      </para>
    </tip>
  </section>

  <section>
    <title>Config File Location</title>

    <para>The main configuration file is usually named <filename>nagios.cfg</filename> 
and located in the <filename 
class="directory">/usr/local/nagios/etc/</filename> directory.
    </para>
  </section>

  <section>
    <title>Configuration File Variables</title>

    <para>Below you will find descriptions of each main Nagios configuration file 
option...</para>

    <section>
      <title><anchor id="configuringnagios-configmain-log_file" xreflabel="Log File"/>Log 
File</title>
 
      
      <variablelist>
      <varlistentry>
      <term>Format</term>
      <listitem><para><literal>log_file=&lt;file_name&gt;</literal></para></listitem>
      </varlistentry>
      <varlistentry>
      <term>Example</term>
      <listitem><para><literal>log_file=/usr/local/nagios/var/nagios.log</literal></para></listitem>
      </varlistentry>
      </variablelist>

      <para>This variable specifies where Nagios should create its main log file. This 
should be the first variable that you define in your configuration file, as 
Nagios will try to write errors that it finds in the rest of your 
configuration data to this file. If you have <xref 
linkend="configuringnagios-configmain-log_rotation_method" /> enabled, this 
file will automatically be rotated every hour, day, week, or month.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-cfg_file" xreflabel="Object 
Configuration Files" />Object Configuration File</title>
      <para>
      Format : 
      <synopsis>cfg_file=&lt;file_name&gt;</synopsis>
      
      <informalexample>
      	<literallayout class="monospaced">
cfg_file=/usr/local/nagios/etc/hosts.cfg
cfg_file=/usr/local/nagios/etc/services.cfg
cfg_file=/usr/local/nagios/etc/commands.cfg
	</literallayout>
      </informalexample>
      
      </para>
      
      <variablelist>
      <varlistentry>
      <term>Format</term>
      <listitem><programlisting>cfg_file=&lt;file_name&gt;</programlisting></listitem>
      </varlistentry>
      <varlistentry>
      <term>Example</term>
      <listitem><para><literallayout class="monospaced">
cfg_file=/usr/local/nagios/etc/hosts.cfg
cfg_file=/usr/local/nagios/etc/services.cfg
cfg_file=/usr/local/nagios/etc/commands.cfg</literallayout></para></listitem>
      </varlistentry>
      </variablelist>

      <para>This directive is used to specify an <xref 
linkend="configuringnagios-configobject" /> containing object definitions 
that Nagios should use for monitoring.  Object configuration files contain 
definitions for hosts, host groups, contacts, contact groups, services, 
commands, etc. You can seperate your configuration information into several 
files and specify multiple
      <code>cfg_file=</code> statements to have each of them processed.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-cfg_dir" xreflabel="Object 
Configuration Directory"/>Object Configuration Directory</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>cfg_dir=&lt;directory_name&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para>
	      <programlisting>
	      cfg_dir=/usr/local/nagios/etc/commands
	      cfg_dir=/usr/local/nagios/etc/services
	      cfg_dir=/usr/local/nagios/etc/hosts
	      </programlisting>
            </para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This directive is used to specify a directory which contains <xref 
linkend="configuringnagios-configobject" /> that Nagios should use for 
monitoring. All files in the directory with a .cfg extension are processed 
as object config files.  Additionally, Nagios will recursively process all 
config files in subdirectories of the directory you specify here. You can 
seperate your configuration files into different directories and specify 
multiple <programlisting>cfg_dir=</programlisting> statements to have all config files in each directory processed.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-object_cache_file" 
xreflabel="Object Cache File"/>Object Cache File</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>object_cache_file=&lt;file_name&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>object_cache_file=/usr/local/nagios/var/objects.cache</programlisting>
            </para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This directive is used to specify a file in which a cached copy of <xref 
linkend="configuringnagios-configobject" /> should be stored. The cache file 
is (re)created every time Nagios is (re)started and is used by the CGIs. It 
is intended to speed up config file caching in the CGIs and allow you to 
edit the source while Nagios is running without affecting the output 
displayed in the CGIs.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-precached_object_file" 
xreflabel="Precached Object File" />Precached Object File</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>precached_object_file=&lt;file_name&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>precached_object_file=/usr/local/nagios/var/objects.precache</programlisting>
            </para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This directive is used to specify a file in which a pre-processed, 
pre-cached copy of <xref linkend="configuringnagios-configobject" /> should 
be stored. This file can be used to drastically improve startup times in 
large/complex Nagios installations.  Read more information on how to speed 
up start times <xref linkend="securityandperformancetuning-faststartup" />.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-resource_file" xreflabel="Resource 
File"/>Resource File</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>resource_file=&lt;file_name&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>resource_file=/usr/local/nagios/etc/resource.cfg</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This is used to specify an optional resource file that can contain
      <code>$USERn$</code> <xref linkend="thebasics-macros" /> definitions. 
      <code>$USERn$</code> macros are useful for storing usernames, passwords, and items commonly used 
in command definitions (like directory paths). The CGIs will 
<emphasis>not</emphasis> attempt to read resource files, so you can set 
restrictive permissions (600 or 660) on them to protect sensitive 
information. You can include multiple resource files by adding multiple
      <code>resource_file</code> statements to the main config file - Nagios will process them all. See the 
sample <filename>resource.cfg</filename> file in the <filename 
class="directory">sample-config/</filename> subdirectory of the Nagios 
distribution for an example of how to define <code>$USERn$</code> macros.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-temp_file" xreflabel="Temp 
File"/>Temp File</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">                                                        
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>temp_file=&lt;file_name&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>temp_file=/usr/local/nagios/var/nagios.tmp</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This is a temporary file that Nagios periodically creates to use when 
updating comment data, status data, etc. The file is deleted when it is no 
longer needed.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-temp_path" xreflabel="Temp 
Path"/>Temp Path</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>temp_path=&lt;dir_name&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>temp_path=/tmp</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This is a directory that Nagios can use as scratch space for creating 
temporary files used during the monitoring process. You should run 
<command>tmpwatch</command>, or a similiar utility, on this directory 
occassionally to delete files older than 24 hours.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-status_log" /> <anchor 
id="configuringnagios-configmain-status_file" xreflabel="Status File" 
/>Status File</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>status_file=&lt;file_name&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>status_file=/usr/local/nagios/var/status.dat</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This is the file that Nagios uses to store the current status, comment, and 
downtime information. This file is used by the CGIs so that current 
monitoring status can be reported via a web interface. The CGIs must have 
read access to this file in order to function properly. This file is deleted 
every time Nagios stops and recreated when it starts.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-status_update_interval" 
xreflabel="Status File Update Interval"/>Status File Update Interval</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>status_update_interval=&lt;seconds&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>status_update_interval=15</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This setting determines how often (in seconds) that Nagios will update 
status data in the <xref linkend="configuringnagios-configmain-status_file" 
/>. The minimum update interval is 1 second.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-nagios_user" xreflabel="Nagios 
User"/>Nagios User</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>nagios_user=&lt;username/UID&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>nagios_user=nagios</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This is used to set the effective user that the Nagios process should run 
as. After initial program startup and before starting to monitor anything, 
Nagios will drop its effective privileges and run as this user. You may 
specify either a username or a UID.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-nagios_group" xreflabel="Nagios 
Group" />Nagios Group</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>nagios_group=&lt;groupname/GID&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>nagios_group=nagios</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This is used to set the effective group that the Nagios process should run 
as. After initial program startup and before starting to monitor anything, 
Nagios will drop its effective privileges and run as this group. You may 
specify either a groupname or a GID.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-enable_notifications" 
xreflabel="Notifications Option" />Notifications Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>enable_notifications=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>enable_notifications=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines whether or not Nagios will send out <link 
linkend="thebasics-notifications">notifications</link> when it initially 
(re)starts. If this option is disabled, Nagios will not send out 
notifications for any host or service.</para>

      <note>
        <para>If you have <xref 
linkend="configuringnagios-configmain-retain_state_information" /> enabled, 
Nagios will ignore this setting when it (re)starts and use the last known 
setting for this option (as stored in the <xref 
linkend="configuringnagios-configmain-state_retention_file" />), unless you 
disable the <xref 
linkend="configuringnagios-configmain-use_retained_program_state" /> 
option. If you want to change this option when state retention is active 
(and the <xref 
linkend="configuringnagios-configmain-use_retained_program_state" /> is 
enabled), you'll have to use the appropriate <link 
linkend="advancedtopics-extcommands">external command</link> or change it 
via the web interface. Values are as follows:</para>
              </note>

        <itemizedlist>
          <listitem>
            <para>0 = Disable notifications</para>
          </listitem>

          <listitem>
            <para>1 = Enable notifications (default)</para>
          </listitem>
        </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-execute_service_checks" 
xreflabel="Service Check Execution Option" />Service Check Execution Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>execute_service_checks=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>execute_service_checks=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines whether or not Nagios will execute service checks 
when it initially (re)starts. If this option is disabled, Nagios will not 
actively execute any service checks and will remain in a sort of 
<quote>sleep</quote> mode (it can still accept <link 
linkend="thebasics-passivechecks">passive checks</link> unless you've <xref 
linkend="configuringnagios-configmain-accept_passive_service_checks" />).  
This option is most often used when configuring backup monitoring servers, 
as described in the documentation on <link 
linkend="advancedtopics-redundancy">redundancy</link>, or when setting up a 
<link linkend="advancedtopics-distributed">distributed</link> monitoring 
environment.</para>

      <note>
        <para>If you have <xref 
linkend="configuringnagios-configmain-retain_state_information" /> enabled, 
Nagios will ignore this setting when it (re)starts and use the last known 
setting for this option (as stored in the <xref 
linkend="configuringnagios-configmain-state_retention_file" />), unless you 
disable the <xref 
linkend="configuringnagios-configmain-use_retained_program_state" /> 
option. If you want to change this option when state retention is active 
(and the <xref 
linkend="configuringnagios-configmain-use_retained_program_state" /> is 
enabled), you'll have to use the appropriate <link 
linkend="advancedtopics-extcommands">external command</link> or change it 
via the web interface. Values are as follows:</para>
              </note>

        <itemizedlist>
          <listitem>
            <para>0 = Don't execute service checks</para>
          </listitem>

          <listitem>
            <para>1 = Execute service checks (default)</para>
          </listitem>
        </itemizedlist>
    </section>

    <section>
      <title>
      <anchor id="configuringnagios-configmain-accept_passive_service_checks" 
xreflabel="Passive Service Check Acceptance Option" />Passive Service Check 
Acceptance Option
      </title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>accept_passive_service_checks=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>accept_passive_service_checks=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines whether or not Nagios will accept <link 
linkend="thebasics-passivechecks">passive service checks</link> when it 
initially (re)starts. If this option is disabled, Nagios will not accept any 
passive service checks.</para>

      <note>
        <para>If you have <xref 
linkend="configuringnagios-configmain-retain_state_information" /> enabled, 
Nagios will ignore this setting when it (re)starts and use the last known 
setting for this option (as stored in the <xref 
linkend="configuringnagios-configmain-state_retention_file" />), unless you 
disable the <xref 
linkend="configuringnagios-configmain-use_retained_program_state" /> 
option. If you want to change this option when state retention is active 
(and the <xref 
linkend="configuringnagios-configmain-use_retained_program_state" /> is 
enabled), you'll have to use the appropriate <link 
linkend="advancedtopics-extcommands">external command</link> or change it 
via the web interface. Values are as follows:</para>
      </note>
        <itemizedlist>
          <listitem>
            <para>0 = Don't accept passive service checks</para>
          </listitem>

          <listitem>
            <para>1 = Accept passive service checks (default)</para>
          </listitem>
        </itemizedlist>
    </section>

    <section>
      <title>
      <anchor id="configuringnagios-configmain-execute_host_checks" 
xreflabel="Host Check Execution Option"/>Host Check Execution Option
      </title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>execute_host_checks=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>execute_host_checks=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines whether or not Nagios will execute on-demand and 
regularly scheduled host checks when it initially (re)starts. If this option 
is disabled, Nagios will not actively execute any host checks, although it 
can still accept <link linkend="thebasics-passivechecks">passive host 
checks</link> unless you've <xref 
linkend="configuringnagios-configmain-accept_passive_service_checks" 
/>). This option is most often used when configuring backup monitoring 
servers, as described in the documentation on <link 
linkend="advancedtopics-redundancy">redundancy</link>, or when setting up a 
<link linkend="advancedtopics-distributed">distributed</link> monitoring 
environment.</para>

      <note>
        <para>If you have <xref 
linkend="configuringnagios-configmain-retain_state_information" /> enabled, 
Nagios will ignore this setting when it (re)starts and use the last known 
setting for this option (as stored in the <xref 
linkend="configuringnagios-configmain-state_retention_file" />), unless you 
disable the <xref 
linkend="configuringnagios-configmain-use_retained_program_state" /> 
option. If you want to change this option when state retention is active 
(and the <xref 
linkend="configuringnagios-configmain-use_retained_program_state" /> is 
enabled), you'll have to use the appropriate <link 
linkend="advancedtopics-extcommands">external command</link> or change it 
via the web interface. Values are as follows:</para>
	      </note>


        <itemizedlist>
          <listitem>
            <para>0 = Don't execute host checks</para>
          </listitem>

          <listitem>
            <para>1 = Execute host checks (default)</para>
          </listitem>
        </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-accept_passive_host_checks" 
xreflabel="Passive Host Check Acceptance Option"/>Passive Host Check 
Acceptance Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>accept_passive_host_checks=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>accept_passive_host_checks=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines whether or not Nagios will accept <link 
linkend="thebasics-passivechecks">passive host checks</link> when it 
initially (re)starts. If this option is disabled, Nagios will not accept any 
passive host checks.</para>

      <note>
        <para>If you have <xref 
linkend="configuringnagios-configmain-retain_state_information" /> enabled, 
Nagios will ignore this setting when it (re)starts and use the last known 
setting for this option (as stored in the <xref 
linkend="configuringnagios-configmain-state_retention_file" />), unless you 
disable the <xref 
linkend="configuringnagios-configmain-use_retained_program_state" /> 
option. If you want to change this option when state retention is active 
(and the <xref 
linkend="configuringnagios-configmain-use_retained_program_state" /> is 
enabled), you'll have to use the appropriate <link 
linkend="advancedtopics-extcommands">external command</link> or change it 
via the web interface. Values are as follows:</para></note>

        <itemizedlist>
          <listitem>
            <para>0 = Don't accept passive host checks</para>
          </listitem>

          <listitem>
            <para>1 = Accept passive host checks (default)</para>
          </listitem>
        </itemizedlist>
     
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-enable_event_handlers" 
xreflabel="Event Handler Option" />Event Handler Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>enable_event_handlers=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>enable_event_handlers=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines whether or not Nagios will run <link 
linkend="advancedtopics-eventhandlers">event handlers</link> when it 
initially (re)starts. If this option is disabled, Nagios will not run any 
host or service event handlers.</para>

      <note>
        <para>If you have <xref 
linkend="configuringnagios-configmain-retain_state_information" /> enabled, 
Nagios will ignore this setting when it (re)starts and use the last known 
setting for this option (as stored in the <xref 
linkend="configuringnagios-configmain-state_retention_file" />), unless you 
disable the <xref 
linkend="configuringnagios-configmain-use_retained_program_state" /> 
option. If you want to change this option when state retention is active 
(and the <xref 
linkend="configuringnagios-configmain-use_retained_program_state" /> is 
enabled), you'll have to use the appropriate <link 
linkend="advancedtopics-extcommands">external command</link> or change it 
via the web interface. Values are as follows:</para></note>

        <itemizedlist>
          <listitem>
            <para>0 = Disable event handlers</para>
          </listitem>

          <listitem>
            <para>1 = Enable event handlers (default)</para>
          </listitem>
        </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-log_rotation_method" xreflabel="Log 
Rotation Method" />Log Rotation Method</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>log_rotation_method=&lt;n/h/d/w/m&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>log_rotation_method=d</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This is the rotation method that you would like Nagios to use for your log 
file. Values are as follows:</para>

      <itemizedlist>
        <listitem>
          <para>n = None (don't rotate the log - this is the default)</para>
        </listitem>

        <listitem>
          <para>h = Hourly (rotate the log at the top of each hour)</para>
        </listitem>

        <listitem>
          <para>d = Daily (rotate the log at midnight each day)</para>
        </listitem>

        <listitem>
          <para>w = Weekly (rotate the log at midnight on Saturday)</para>
        </listitem>

        <listitem>
          <para>m = Monthly (rotate the log at midnight on the last day of the month)</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-log_archive_path" xreflabel="Log 
Archive Path" />Log Archive Path</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>log_archive_path=&lt;path&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>log_archive_path=/usr/local/nagios/var/archives/</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This is the directory where Nagios should place log files that have been 
rotated. This option is ignored if you choose to not use the <xref 
linkend="configuringnagios-configmain-log_rotation_method" /> functionality.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-check_external_commands" 
xreflabel="External Command Check Option"/>External Command Check Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>check_external_commands=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>check_external_commands=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines whether or not Nagios will check the <xref 
linkend="configuringnagios-configmain-command_file" /> for commands that 
should be executed. This option must be enabled if you plan on using the 
<link linkend="thebasics-cgis">command CGI</link> to issue commands via the 
web interface. More information on external commands can be found <link 
linkend="advancedtopics-extcommands">here</link>.</para>

      <itemizedlist>
        <listitem>
          <para>0 = Don't check external commands</para>
        </listitem>

        <listitem>
          <para>1 = Check external commands (default)</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-command_check_interval" 
xreflabel="External Command Check Interval"/>External Command Check Interval</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>command_check_interval=&lt;xxx&gt;[s]</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>command_check_interval=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>If you specify a number with an "s" appended to it (i.e. 30s), this is the 
number of seconds to wait between external command checks.  If you leave off 
the "s", this is the number of <quote>time units</quote> to wait between 
external command checks. Unless you've changed the <xref 
linkend="configuringnagios-configmain-interval_length" /> value (as defined 
below) from the default value of 60, this number will mean minutes.</para>

      <note>
        <para>By setting this value to <emphasis role="bold">-1</emphasis>, Nagios will 
check for external commands as often as possible. Each time Nagios checks 
for external commands it will read and process all commands present in the 
<xref linkend="configuringnagios-configmain-command_file" /> before 
continuing on with its other duties. More information on external commands 
can be found <link linkend="advancedtopics-extcommands">here</link>.</para>
      </note>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-command_file" xreflabel="External 
Command File" />External Command File</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>command_file=&lt;file_name&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>command_file=/usr/local/nagios/var/rw/nagios.cmd</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This is the file that Nagios will check for external commands to 
process. The <link linkend="thebasics-cgis-cmd_cgi">command CGI</link> 
writes commands to this file. The external command file is implemented as a 
named pipe (FIFO), which is created when Nagios starts and removed when it 
shuts down. If the file exists when Nagios starts, the Nagios process will 
terminate with an error message. More information on external commands can 
be found <link linkend="advancedtopics-extcommands">here</link>.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-external_command_buffer_slots" 
xreflabel="External Command Buffer Slots"/>External Command Buffer Slots</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>external_command_buffer_slots=&lt;#&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>external_command_buffer_slots=512</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <note>
        <para>This is an advanced feature.</para>
      </note>

      <para>This option determines how many buffer slots Nagios will reserve for caching 
external commands that have been read from the external command file by a 
worker thread, but have not yet been processed by the main thread of the 
Nagios deamon. Each slot can hold one external command, so this option 
essentially determines how many commands can be buffered. For installations 
where you process a large number of passive checks (e.g. <link 
linkend="advancedtopics-distributed">distributed setups</link>), you may 
need to increase this number. You should consider using MRTG to graph 
Nagios' usage of external command buffers.  You can read more on how to 
configure graphing <link 
linkend="securityandperformancetuning-mrtggraphs">here</link>.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-lock_file" xreflabel="Lock 
File"/>Lock File</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>lock_file=&lt;file_name&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>lock_file=/tmp/nagios.lock</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option specifies the location of the lock file that Nagios should 
create when it runs as a daemon (when started with the
      <option>-d</option> command line argument). This file contains the process id (<acronym>PID</acronym>) number of the running Nagios process.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-retain_state_information" 
xreflabel="State Retention Option" />State Retention Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>retain_state_information=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>retain_state_information=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines whether or not Nagios will retain state information 
for hosts and services between program restarts. If you enable this option, 
you should supply a value for the <xref 
linkend="configuringnagios-configmain-state_retention_file" /> 
variable. When enabled, Nagios will save all state information for hosts and 
service before it shuts down (or restarts) and will read in previously saved 
state information when it starts up again.</para>

      <itemizedlist>
        <listitem>
          <para>0 = Don't retain state information</para>
        </listitem>

        <listitem>
          <para>1 = Retain state information (default)</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-state_retention_file" 
xreflabel="State Retention File" />State Retention File</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>state_retention_file=&lt;file_name&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>state_retention_file=/usr/local/nagios/var/retention.dat</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This is the file that Nagios will use for storing status, downtime, and 
comment information before it shuts down. When Nagios is restarted it will 
use the information stored in this file for setting the initial states of 
services and hosts before it starts monitoring anything. In order to make 
Nagios retain state information between program restarts, you must enable 
the <xref linkend="configuringnagios-configmain-retain_state_information" /> 
option.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-retention_update_interval" 
xreflabel="Automatic State Retention Update Interval" />Automatic State 
Retention Update Interval</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>retention_update_interval=&lt;minutes&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>retention_update_interval=60</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This setting determines how often (in minutes) that Nagios will 
automatically save retention data during normal operation. If you set this 
value to 0, Nagios will not save retention data at regular intervals, but it 
will still save retention data before shutting down or restarting. If you 
have disabled state retention (with the <xref 
linkend="configuringnagios-configmain-retain_state_information" /> option), 
this option has no effect.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-use_retained_program_state" 
xreflabel="Use Retained Program State Option" />Use Retained Program State 
Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>use_retained_program_state=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>use_retained_program_state=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This setting determines whether or not Nagios will set various program-wide 
state variables based on the values saved in the retention file. Some of 
these program-wide state variables that are normally saved across program 
restarts if state retention is enabled include the <xref 
linkend="configuringnagios-configmain-enable_notifications" />, <xref 
linkend="configuringnagios-configmain-enable_flap_detection" />, <xref 
linkend="configuringnagios-configmain-enable_event_handlers" />, <xref 
linkend="configuringnagios-configmain-execute_service_checks" />, and <xref 
linkend="configuringnagios-configmain-accept_passive_service_checks" /> 
!!!!!!!!!! options. If you do not have <xref 
linkend="configuringnagios-configmain-retain_state_information" /> enabled, 
this option has no effect.</para>

      <itemizedlist>
        <listitem>
          <para>0 = Don't use retained program state</para>
        </listitem>

        <listitem>
          <para>1 = Use retained program state (default)</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-use_retained_scheduling_info" 
xreflabel="Use Retained Scheduling Info Option" />Use Retained Scheduling 
Info Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>use_retained_scheduling_info=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>use_retained_scheduling_info=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This setting determines whether or not Nagios will retain scheduling info 
(next check times) for hosts and services when it restarts. If you are 
adding a large number (or percentage) of hosts and services, I would 
recommend disabling this option when you first restart Nagios, as it can 
adversely skew the spread of initial checks. Otherwise you will probably 
want to leave it enabled.</para>

      <itemizedlist>
        <listitem>
          <para>0 = Don't use retained scheduling info</para>
        </listitem>

        <listitem>
          <para>1 = Use retained scheduling info (default)</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title xreflabel="Retained Host and Service Attribute Masks"><anchor id="configuringnagios-configmain-retained_service_attribute_mask" 
/><anchor id="configuringnagios-configmain-retained_host_attribute_mask" /> 
Retained Host and Service Attribute Masks</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>retained_host_attribute_mask=&lt;number&gt;retained_service_attribute_mask=&lt;number&gt;</programlisting>
            </para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>retained_host_attribute_mask=0retained_service_attribute_mask=0</programlisting>
            </para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <warning>
        <para>This is an advanced feature. You'll need to read the Nagios source code to 
use this option effectively.</para>
      </warning>

      <para>These options determine which host or service attributes are NOT retained 
across program restarts. The values for these options are a bitwise AND of 
values specified by the <quote>MODATTR_</quote> definitions in the 
<filename>include/common.h</filename> source code file. By default, all host 
and service attributes are retained.</para>
    </section>

    <section>
      <title xreflabel="Retained Process Attribute Masks"><anchor 
id="configuringnagios-configmain-retained_process_service_attribute_mask" 
/><anchor 
id="configuringnagios-configmain-retained_process_host_attribute_mask" 
/>Retained Process Attribute Masks</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>retained_process_host_attribute_mask=&lt;number&gt;retained_process_service_attribute_mask=&lt;number&gt;</programlisting>
            </para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>retained_process_host_attribute_mask=0retained_process_service_attribute_mask=0</programlisting>
            </para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <warning>
        <para>This is an advanced feature. You'll need to read the Nagios source code to 
use this option effectively.</para>
      </warning>

      <para>These options determine which process attributes are NOT retained across 
program restarts. There are two masks because there are often separate host 
and service process attributes that can be changed. For example, host checks 
can be disabled at the program level, while service checks are still 
enabled. The values for these options are a bitwise AND of values specified 
by the <quote>MODATTR_</quote> definitions in the 
<filename>include/common.h</filename> source code file. By default, all 
process attributes are retained.</para>
    </section>

    <section>
      <title xreflabel="Retained Contact Attribute Masks" ><anchor 
id="configuringnagios-configmain-retained_contact_service_attribute_mask" 
/><anchor 
id="configuringnagios-configmain-retained_contact_host_attribute_mask" 
/>Retained Contact Attribute Masks</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>retained_contact_host_attribute_mask=&lt;number&gt;retained_contact_service_attribute_mask=&lt;number&gt;</programlisting>
            </para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>retained_contact_host_attribute_mask=0retained_contact_service_attribute_mask=0</programlisting>
            </para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <warning>
        <para>This is an advanced feature. You'll need to read the Nagios source code to 
use this option effectively.</para>
      </warning>

      <para>These options determine which contact attributes are NOT retained across 
program restarts. There are two masks because there are often separate host 
and service contact attributes that can be changed. The values for these 
options are a bitwise AND of values specified by the <quote>MODATTR_</quote> 
definitions in the <filename>include/common.h</filename> source code 
file. By default, all process attributes are retained.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-use_syslog" xreflabel="Syslog 
Logging Option"/>Syslog Logging Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>use_syslog=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>use_syslog=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This variable determines whether messages are logged to the syslog facility 
on your local host. Values are as follows:</para>

      <itemizedlist>
        <listitem>
          <para>0 = Don't use syslog facility</para>
        </listitem>

        <listitem>
          <para>1 = Use syslog facility</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-log_notifications" 
xreflabel="Notification Logging Option"/>Notification Logging Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>log_notifications=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>log_notifications=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This variable determines whether or not notification messages are logged. If 
you have a lot of contacts or regular service failures your log file will 
grow relatively quickly. Use this option to keep contact notifications from 
being logged.</para>

      <itemizedlist>
        <listitem>
          <para>0 = Don't log notifications</para>
        </listitem>

        <listitem>
          <para>1 = Log notifications</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-log_service_retries" 
xreflabel="Service Check Retry Logging Option"/>Service Check Retry Logging 
Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>log_service_retries=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>log_service_retries=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This variable determines whether or not service check retries are 
logged. Service check retries occur when a service check results in a non-OK 
state, but you have configured Nagios to retry the service more than once 
before responding to the error. Services in this situation are considered to 
be in "soft" states. Logging service check retries is mostly useful when 
attempting to debug Nagios or test out service <link 
linkend="advancedtopics-eventhandlers">event handlers</link>.</para>

      <itemizedlist>
        <listitem>
          <para>0 = Don't log service check retries</para>
        </listitem>

        <listitem>
          <para>1 = Log service check retries</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-log_host_retries" xreflabel="Host 
Check Retry Logging Option"/>Host Check Retry Logging Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>log_host_retries=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>log_host_retries=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This variable determines whether or not host check retries are 
logged. Logging host check retries is mostly useful when attempting to debug 
Nagios or test out host <link linkend="advancedtopics-eventhandlers">event 
handlers</link>.</para>

      <itemizedlist>
        <listitem>
          <para>0 = Don't log host check retries</para>
        </listitem>

        <listitem>
          <para>1 = Log host check retries</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-log_event_handlers" 
xreflabel="Event Handler Logging Option"/>Event Handler Logging Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>log_event_handlers=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>log_event_handlers=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This variable determines whether or not service and host <link 
linkend="advancedtopics-eventhandlers">event handlers</link> are logged.  
Event handlers are optional commands that can be run whenever a service or 
hosts changes state. Logging event handlers is most useful when debugging 
Nagios or first trying out your event handler scripts.</para>

      <itemizedlist>
        <listitem>
          <para>0 = Don't log event handlers</para>
        </listitem>

        <listitem>
          <para>1 = Log event handlers</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-log_initial_states" 
xreflabel="Initial States Logging Option"/>Initial States Logging Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>log_initial_states=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>log_initial_states=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This variable determines whether or not Nagios will force all initial host 
and service states to be logged, even if they result in an OK state. Initial 
service and host states are normally only logged when there is a problem on 
the first check. Enabling this option is useful if you are using an 
application that scans the log file to determine long-term state statistics 
for services and hosts.</para>

      <itemizedlist>
        <listitem>
          <para>0 = Don't log initial states (default)</para>
        </listitem>

        <listitem>
          <para>1 = Log initial states</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-log_external_commands" 
xreflabel="External Command Logging Option"/>External Command Logging Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>log_external_commands=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>log_external_commands=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This variable determines whether or not Nagios will log <link 
linkend="advancedtopics-extcommands">external commands</link> that it 
receives from the <xref linkend="configuringnagios-configmain-command_file" 
/>.</para>

      <note>
        <para>This option does not control whether or not <link 
linkend="thebasics-passivechecks">passive service checks</link> (which are a 
type of external command) get logged. To enable or disable logging of 
passive checks, use the <xref 
linkend="configuringnagios-configmain-log_passive_checks" /> option.</para>
      </note>
        <itemizedlist>
          <listitem>
            <para>0 = Don't log external commands</para>
          </listitem>

          <listitem>
            <para>1 = Log external commands (default)</para>
          </listitem>
        </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-log_passive_checks" 
xreflabel="Passive Check Logging Option" />Passive Check Logging Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>log_passive_checks=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>log_passive_checks=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This variable determines whether or not Nagios will log <link 
linkend="thebasics-passivechecks">passive host and service checks</link> 
that it receives from the <link 
linkend="configuringnagios-configmain-command_file">external command 
file</link>. If you are setting up a <link 
linkend="advancedtopics-distributed">distributed monitoring 
environment</link> or plan on handling a large number of passive checks on a 
regular basis, you may wish to disable this option so your log file doesn't 
get too large.</para>

      <itemizedlist>
        <listitem>
          <para>0 = Don't log passive checks</para>
        </listitem>

        <listitem>
          <para>1 = Log passive checks (default)</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-global_host_event_handler" 
xreflabel="Global Host Event Handler Option"/>Global Host Event Handler 
Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>global_host_event_handler=&lt;command&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>global_host_event_handler=log-host-event-to-db</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option allows you to specify a host event handler command that is to be 
run for every host state change. The global event handler is executed 
immediately prior to the event handler that you have optionally specified in 
each host definition. The command argument is the short name of a command 
that you define in your <xref linkend="configuringnagios-configobject" 
/>. The maximum amount of time that this command can run is controlled by 
the <xref linkend="configuringnagios-configmain-event_handler_timeout" /> 
option. More information on event handlers can be found <link 
linkend="advancedtopics-eventhandlers">here</link>.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-global_service_event_handler" 
xreflabel="Global Service Event Handler Option"/>Global Service Event 
Handler Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>global_service_event_handler=&lt;command&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>global_service_event_handler=log-service-event-to-db</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option allows you to specify a service event handler command that is to 
be run for every service state change. The global event handler is executed 
immediately prior to the event handler that you have optionally specified in 
each service definition. The command argument is the short name of a command 
that you define in your <xref linkend="configuringnagios-configobject" 
/>. The maximum amount of time that this command can run is controlled by 
the <xref linkend="configuringnagios-configmain-event_handler_timeout" /> 
option. More information on event handlers can be found <link 
linkend="advancedtopics-eventhandlers">here</link>.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-sleep_time" xreflabel="Inter-Check 
Sleep Time"/>Inter-Check Sleep Time</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>sleep_time=&lt;seconds&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>sleep_time=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This is the number of seconds that Nagios will sleep before checking to see 
if the next service or host check in the scheduling queue should be 
executed. Note that Nagios will only sleep after it "catches up" with queued 
service checks that have fallen behind.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-service_inter_check_delay_method" 
xreflabel="Service Inter-Check Delay Method"/>Service Inter-Check Delay 
Method</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>service_inter_check_delay_method=&lt;n/d/s/x.xx&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>service_inter_check_delay_method=s</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option allows you to control how service checks are initially 
<quote>spread out</quote> in the event queue. Using a <quote>smart</quote> 
delay calculation (the default) will cause Nagios to calculate an average 
check interval and spread initial checks of all services out over that 
interval, thereby helping to eliminate CPU load spikes. Using no delay is 
generally not recommended, as it will cause all service checks to be 
scheduled for execution at the same time. This means that you will generally 
have large CPU spikes when the services are all executed in parallel. More 
information on how to estimate how the inter-check delay affects service 
check scheduling can be found <link 
linkend="advancedtopics-checkscheduling-service_inter_check_delay">here</link>. 
Values are as follows:</para>

      <itemizedlist>
        <listitem>
          <para>n = Don't use any delay - schedule all service checks to run immediately 
(i.e. at the same time!)</para>
        </listitem>

        <listitem>
          <para>d = Use a "dumb" delay of 1 second between service checks</para>
        </listitem>

        <listitem>
          <para>s = Use a <quote>smart</quote> delay calculation to spread service checks 
out evenly (default)</para>
        </listitem>

        <listitem>
          <para>x.xx = Use a user-supplied inter-check delay of x.xx seconds</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-max_service_check_spread" 
xreflabel="Maximum Service Check Spread"/>Maximum Service Check Spread</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>max_service_check_spread=&lt;minutes&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>max_service_check_spread=30</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines the maximum number of minutes from when Nagios starts 
that all services (that are scheduled to be regularly checked) are 
checked. This option will automatically adjust the <link 
linkend="configuringnagios-configmain-service_inter_check_delay_method">service 
inter-check delay method</link> (if necessary) to ensure that the initial 
checks of all services occur within the timeframe you specify. In general, 
this option will not have an affect on service check scheduling if 
scheduling information is being retained using the <xref 
linkend="configuringnagios-configmain-use_retained_scheduling_info" /> 
option.  Default value is 30 (minutes).</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-service_interleave_factor" 
xreflabel="Service Interleave Factor"/>Service Interleave Factor</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>service_interleave_factor=&lt;s|x&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>service_interleave_factor=s</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This variable determines how service checks are interleaved.  Interleaving 
allows for a more even distribution of service checks, reduced load on 
remote hosts, and faster overall detection of host problems. Setting this 
value to 1 is equivalent to not interleaving the service checks (this is how 
versions of Nagios previous to 0.0.5 worked). Set this value to s (smart) 
for automatic calculation of the interleave factor unless you have a 
specific reason to change it. The best way to understand how interleaving 
works is to watch the <link linkend="thebasics-cgis-status_cgi">status 
CGI</link> (detailed view) when Nagios is just starting. You should see that 
the service check results are spread out as they begin to appear. More 
information on how interleaving works can be found <link 
linkend="advancedtopics-checkscheduling-service_interleaving">here</link>.</para>

      <itemizedlist>
        <listitem>
          <para>x = A number greater than or equal to 1 that specifies the interleave factor 
to use. An interleave factor of 1 is equivalent to not interleaving the 
service checks.</para>
        </listitem>

        <listitem>
          <para>s = Use a <quote>smart</quote> interleave factor calculation (default)</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-max_concurrent_checks" 
xreflabel="Maximum Concurrent Service Checks"/>Maximum Concurrent Service 
Checks</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>max_concurrent_checks=&lt;max_checks&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>max_concurrent_checks=20</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option allows you to specify the maximum number of service checks that 
can be run in parallel at any given time. Specifying a value of 1 for this 
variable essentially prevents any service checks from being run in 
parallel. Specifying a value of 0 (the default) does not place any 
restrictions on the number of concurrent checks. You'll have to modify this 
value based on the system resources you have available on the machine that 
runs Nagios, as it directly affects the maximum load that will be imposed on 
the system (processor utilization, memory, etc.). More information on how to 
estimate how many concurrent checks you should allow can be found <link 
linkend="advancedtopics-checkscheduling-max_concurrent_checks">here</link>.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-check_result_reaper_frequency" 
xreflabel="Check Result Reaper Frequency"/>Check Result Reaper Frequency</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>check_result_reaper_frequency=&lt;frequency_in_seconds&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>check_result_reaper_frequency=5</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option allows you to control the frequency in seconds of check result 
"reaper" events. "Reaper" events process the results from host and service 
checks that have finished executing. These events consitute the core of the 
monitoring logic in Nagios.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-max_check_result_reaper_time" 
xreflabel="Maximum Check Result Reaper Time"/>Maximum Check Result Reaper 
Time</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>max_check_result_reaper_time=&lt;seconds&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>max_check_result_reaper_time=30</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option allows you to control the maximum amount of time in seconds that 
host and service check result "reaper" events are allowed to run. "Reaper" 
events process the results from host and service checks that have finished 
executing. If there are a lot of results to process, reaper events may take 
a long time to finish, which might delay timely execution of new host and 
service checks. This variable allows you to limit the amount of time that an 
individual reaper event will run before it hands control back over to Nagios 
for other portions of the monitoring logic.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-check_result_path" xreflabel="Check 
Result Path"/>Check Result Path</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>check_result_path=&lt;path&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>check_result_path=/var/spool/nagios/checkresults</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This options determines which directory Nagios will use to temporarily store 
host and service check results before they are processed. This directory 
should not be used to store any other files, as Nagios will periodically 
clean this directory of old file (see the <xref 
linkend="configuringnagios-configmain-max_check_result_file_age" /> option 
for more information).</para>

      <note><para>Make sure that only a single instance of Nagios has access to the check 
result path. If multiple instances of Nagios have their check result path 
set to the same directory, you will run into problems with check results 
being processed (incorrectly) by the wrong instance of Nagios!</para></note>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-max_check_result_file_age" 
xreflabel="Max Check Result File Age"/>Max Check Result File Age</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>max_check_result_file_age=&lt;seconds&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>max_check_result_file_age=3600</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This options determines the maximum age in seconds that Nagios will consider 
check result files found in the <link 
linkend="configuringnagios-configmain-check_result_path">check_result_path</link> 
directory to be valid. Check result files that are older that this threshold 
will be deleted by Nagios and the check results they contain will not be 
processed. By using a value of zero (0) with this option, Nagios will 
process all check result files - even if they're older than your hardware 
:-).</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-host_inter_check_delay_method" 
xreflabel="Host Inter-Check Delay Method"/>Host Inter-Check Delay Method</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>host_inter_check_delay_method=&lt;n/d/s/x.xx&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>host_inter_check_delay_method=s</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option allows you to control how host checks that are scheduled to be 
checked on a regular basis are initially <quote>spread out</quote> in the 
event queue. Using a <quote>smart</quote> delay calculation (the default) 
will cause Nagios to calculate an average check interval and spread initial 
checks of all hosts out over that interval, thereby helping to eliminate CPU 
load spikes. Using no delay is generally not recommended. Using no delay 
will cause all host checks to be scheduled for execution at the same 
time. More information on how to estimate how the inter-check delay affects 
host check scheduling can be found <link 
linkend="advancedtopics-checkscheduling-host_inter_check_delay">here</link>.Values 
are as follows:</para>

      <itemizedlist>
        <listitem>
          <para>n = Don't use any delay - schedule all host checks to run immediately 
(i.e. at the same time!)</para>
        </listitem>

        <listitem>
          <para>d = Use a "dumb" delay of 1 second between host checks</para>
        </listitem>

        <listitem>
          <para>s = Use a <quote>smart</quote> delay calculation to spread host checks out 
evenly (default)</para>
        </listitem>

        <listitem>
          <para>x.xx = Use a user-supplied inter-check delay of x.xx seconds</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-max_host_check_spread" 
xreflabel="Maximum Host Check Spread"/>Maximum Host Check Spread</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>max_host_check_spread=&lt;minutes&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>max_host_check_spread=30</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines the maximum number of minutes from when Nagios starts 
that all hosts (that are scheduled to be regularly checked) are 
checked. This option will automatically adjust the <link 
linkend="configuringnagios-configmain-host_inter_check_delay_method">host 
inter-check delay method</link> (if necessary) to ensure that the initial 
checks of all hosts occur within the timeframe you specify. In general, this 
option will not have an affect on host check scheduling if scheduling 
information is being retained using the <link 
linkend="configuringnagios-configmain-use_retained_scheduling_info">use_retained_scheduling_info</link> 
option. Default value is 30 (minutes).</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-interval_length" xreflabel="Timing 
Interval Length" />Timing Interval Length</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>interval_length=&lt;seconds&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>interval_length=60</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This is the number of seconds per <quote>unit interval</quote> used for 
timing in the scheduling queue, re-notifications, etc. "Units intervals" are 
used in the object configuration file to determine how often to run a 
service check, how often to re-notify a contact, etc.</para>

      <important><para>The default value for this is set to 60, which means that a "unit value" of 
1 in the object configuration file will mean 60 seconds (1 minute). I have 
not really tested other values for this variable, so proceed at your own 
risk if you decide to do so!</para></important>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-auto_reschedule_checks" 
xreflabel="Auto-Rescheduling Option"/>Auto-Rescheduling Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>auto_reschedule_checks=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>auto_reschedule_checks=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines whether or not Nagios will attempt to automatically 
reschedule active host and service checks to <quote>smooth</quote> them out 
over time. This can help to balance the load on the monitoring server, as it 
will attempt to keep the time between consecutive checks consistent, at the 
expense of executing checks on a more rigid schedule.</para>

      <warning><para>THIS IS AN EXPERIMENTAL FEATURE AND MAY BE REMOVED IN FUTURE 
VERSIONS. ENABLING THIS OPTION CAN DEGRADE PERFORMANCE - RATHER THAN 
INCREASE IT - IF USED IMPROPERLY!</para></warning>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-auto_rescheduling_interval" 
xreflabel="Auto-Rescheduling Interval"/>Auto-Rescheduling Interval</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>auto_rescheduling_interval=&lt;seconds&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>auto_rescheduling_interval=30</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines how often (in seconds) Nagios will attempt to 
automatically reschedule checks. This option only has an effect if the <xref 
linkend="configuringnagios-configmain-auto_reschedule_checks" /> option is 
enabled.  Default is 30 seconds.</para>

      <warning><para>THIS IS AN EXPERIMENTAL FEATURE AND MAY BE REMOVED IN FUTURE 
VERSIONS. ENABLING THE AUTO-RESCHEDULING OPTION CAN DEGRADE PERFORMANCE - 
RATHER THAN INCREASE IT - IF USED IMPROPERLY!</para></warning>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-auto_rescheduling_window" 
xreflabel="Auto-Rescheduling Window"/>Auto-Rescheduling Window</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>auto_rescheduling_window=&lt;seconds&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>auto_rescheduling_window=180</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines the <quote>window</quote> of time (in seconds) that 
Nagios will look at when automatically rescheduling checks. Only host and 
service checks that occur in the next X seconds (determined by this 
variable) will be rescheduled. This option only has an effect if the <xref 
linkend="configuringnagios-configmain-auto_reschedule_checks" /> option is 
enabled.  Default is 180 seconds (3 minutes).</para>

      <warning><para>THIS IS AN EXPERIMENTAL FEATURE AND MAY BE REMOVED IN FUTURE 
VERSIONS. ENABLING THE AUTO-RESCHEDULING OPTION CAN DEGRADE PERFORMANCE - 
RATHER THAN INCREASE IT - IF USED IMPROPERLY!</para></warning>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-use_aggressive_host_checking" 
xreflabel="Aggressive Host Checking Option"/>Aggressive Host Checking Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>use_aggressive_host_checking=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>use_aggressive_host_checking=0</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>Nagios tries to be smart about how and when it checks the status of 
hosts. In general, disabling this option will allow Nagios to make some 
smarter decisions and check hosts a bit faster. Enabling this option will 
increase the amount of time required to check hosts, but may improve 
reliability a bit. Unless you have problems with Nagios not recognizing that 
a host recovered, I would suggest not enabling this option.</para>

      <itemizedlist>
        <listitem>
          <para>0 = Don't use aggressive host checking (default)</para>
        </listitem>

        <listitem>
          <para>1 = Use aggressive host checking</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-translate_passive_host_checks" 
xreflabel="Translate Passive Host Checks Option"/>Translate Passive Host 
Checks Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>translate_passive_host_checks=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>translate_passive_host_checks=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines whether or not Nagios will translate DOWN/UNREACHABLE 
passive host check results to their <quote>correct</quote> state from the 
viewpoint of the local Nagios instance. This can be very useful in 
distributed and failover monitoring installations. More information on 
passive check state translation can be found <link 
linkend="advancedtopics-passivestatetranslation">here</link>.</para>

      <itemizedlist>
        <listitem>
          <para>0 = Disable check translation (default)</para>
        </listitem>

        <listitem>
          <para>1 = Enable check translation</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-passive_host_checks_are_soft" 
xreflabel="Passive Host Checks Are SOFT Option"/>Passive Host Checks Are 
SOFT Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>passive_host_checks_are_soft=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>passive_host_checks_are_soft=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines whether or not Nagios will treat <link 
linkend="thebasics-passivechecks">passive host checks</link> as HARD states 
or SOFT states. By default, a passive host check result will put a host into 
a <link linkend="thebasics-statetypes">HARD state type</link>. You can 
change this behavior by enabling this option.</para>

      <itemizedlist>
        <listitem>
          <para>0 = Passive host checks are HARD (default)</para>
        </listitem>

        <listitem>
          <para>1 = Passive host checks are SOFT</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor 
id="configuringnagios-configmain-enable_predictive_host_dependency_checks" 
xreflabel="Predictive Host Dependency Checks Option"/>Predictive Host 
Dependency Checks Option</title>
      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>enable_predictive_host_dependency_checks=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>enable_predictive_host_dependency_checks=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines whether or not Nagios will execute predictive checks 
of hosts that are being depended upon (as defined in <link 
linkend="advancedtopics-dependencies">host dependencies</link>) for a 
particular host when it changes state. Predictive checks help ensure that 
the dependency logic is as accurate as possible. More information on how 
predictive checks work can be found <link 
linkend="advancedtopics-dependencychecks">here</link>.</para>

      <itemizedlist>
        <listitem>
          <para>0 = Disable predictive checks</para>
        </listitem>

        <listitem>
          <para>1 = Enable predictive checks (default)</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor 
id="configuringnagios-configmain-enable_predictive_service_dependency_checks" 
xreflabel="Predictive Service Dependency Checks Option"/>Predictive Service 
Dependency Checks Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>enable_predictive_service_dependency_checks=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>enable_predictive_service_dependency_checks=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines whether or not Nagios will execute predictive checks 
of services that are being depended upon (as defined in <link 
linkend="advancedtopics-dependencies">service dependencies</link>) for a 
particular service when it changes state. Predictive checks help ensure that 
the dependency logic is as accurate as possible. More information on how 
predictive checks work can be found <link 
linkend="advancedtopics-dependencychecks">here</link>.</para>

      <itemizedlist>
        <listitem>
          <para>0 = Disable predictive checks</para>
        </listitem>

        <listitem>
          <para>1 = Enable predictive checks (default)</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-cached_host_check_horizon" 
xreflabel="Cached Host Check Horizon"/>Cached Host Check Horizon</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>cached_host_check_horizon=&lt;seconds&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>cached_host_check_horizon=15</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines the maximum amount of time (in seconds)  that the 
state of a previous host check is considered current. Cached host states 
(from host checks that were performed more recently than the time specified 
by this value) can improve host check performance immensely. Too high of a 
value for this option may result in (temporarily) inaccurate host states, 
while a low value may result in a performance hit for host checks. Use a 
value of 0 if you want to disable host check caching. More information on 
cached checks can be found <link 
linkend="advancedtopics-cachedchecks">here</link>.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-cached_service_check_horizon" 
xreflabel="Cached Service Check Horizon"/>Cached Service Check Horizon</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>cached_service_check_horizon=&lt;seconds&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>cached_service_check_horizon=15</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines the maximum amount of time (in seconds)  that the 
state of a previous service check is considered current. Cached service 
states (from service checks that were performed more recently than the time 
specified by this value) can improve service check performance when a lot of 
<link linkend="advancedtopics-dependencies">service dependencies</link> are 
used. Too high of a value for this option may result in inaccuracies in the 
service dependency logic. Use a value of 0 if you want to disable service 
check caching. More information on cached checks can be found <link 
linkend="advancedtopics-cachedchecks">here</link>.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-use_large_installation_tweaks" 
xreflabel="Large Installation Tweaks Option"/>Large Installation Tweaks 
Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>use_large_installation_tweaks=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>use_large_installation_tweaks=0</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines whether or not the Nagios daemon will take several 
shortcuts to improve performance. These shortcuts result in the loss of a 
few features, but larger installations will likely see a lot of benefit from 
doing so. More information on what optimizations are taken when you enable 
this option can be found <link 
linkend="securityandperformancetuning-largeinstalltweaks">here</link>.</para>

      <itemizedlist>
        <listitem>
          <para>0 = Don't use tweaks (default)</para>
        </listitem>

        <listitem>
          <para>1 = Use tweaks</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-free_child_process_memory" 
xreflabel="Child Process Memory Option"/>Child Process Memory Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>free_child_process_memory=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>free_child_process_memory=0</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines whether or not Nagios will free memory in child 
processes when they are fork()ed off from the main process. By default, 
Nagios frees memory. However, if the <link 
linkend="configuringnagios-configmain-use_large_installation_tweaks">use_large_installation_tweaks</link> 
option is enabled, it will not. By defining this option in your 
configuration file, you are able to override things to get the behavior you 
want.</para>

      <itemizedlist>
        <listitem>
          <para>0 = Don't free memory</para>
        </listitem>

        <listitem>
          <para>1 = Free memory</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-child_processes_fork_twice" 
xreflabel="Child Processes Fork Twice"/>Child Processes Fork Twice</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>child_processes_fork_twice=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>child_processes_fork_twice=0</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines whether or not Nagios will fork() child processes 
twice when it executes host and service checks. By default, Nagios fork()s 
twice. However, if the <link 
linkend="configuringnagios-configmain-use_large_installation_tweaks">use_large_installation_tweaks</link> 
option is enabled, it will only fork() once. By defining this option in your 
configuration file, you are able to override things to get the behavior you 
want.</para>

      <itemizedlist>
        <listitem>
          <para>0 = Fork() just once</para>
        </listitem>

        <listitem>
          <para>1 = Fork() twice</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-enable_environment_macros" 
xreflabel="Environment Macros Option"/>Environment Macros Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>enable_environment_macros=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>enable_environment_macros=0</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>This option determines whether or not the Nagios daemon will make all 
standard <link linkend="thebasics-macrolist">macros</link> available as 
environment variables to your check, notification, event hander, 
etc. commands. In large Nagios installations this can be problematic because 
it takes additional memory and (more importantly)  CPU to compute the values 
of all macros and make them available to the environment.</para>

      <itemizedlist>
        <listitem>
          <para>0 = Don't make macros available as environment variables</para>
        </listitem>

        <listitem>
          <para>1 = Make macros available as environment variables (default)</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-enable_flap_detection" 
xreflabel="Flap Detection Option" />Flap Detection Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>enable_flap_detection=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>enable_flap_detection=0</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines whether or not Nagios will try and detect hosts and 
services that are <quote>flapping</quote>. Flapping occurs when a host or 
service changes between states too frequently, resulting in a barrage of 
notifications being sent out. When Nagios detects that a host or service is 
flapping, it will temporarily suppress notifications for that host/service 
until it stops flapping.</para><caution><para>Flap detection is very experimental at this point, so use this feature with 
caution! More information on how flap detection and handling works can be 
found <link linkend="advancedtopics-flapping">here</link>.</para></caution>
      <note><para>If you have <link 
linkend="configuringnagios-configmain-retain_state_information">state 
retention</link> enabled, Nagios will ignore this setting when it (re)starts 
and use the last known setting for this option (as stored in the <link 
linkend="configuringnagios-configmain-state_retention_file">state retention 
file</link>), unless you disable the <link 
linkend="configuringnagios-configmain-use_retained_program_state">use_retained_program_state</link> 
option. If you want to change this option when state retention is active 
(and the <link 
linkend="configuringnagios-configmain-use_retained_program_state">use_retained_program_state</link> 
is enabled), you'll have to use the appropriate <link 
linkend="advancedtopics-extcommands">external command</link> or change it 
via the web interface.</para></note>

      <itemizedlist>
        <listitem>
          <para>0 = Don't enable flap detection (default)</para>
        </listitem>

        <listitem>
          <para>1 = Enable flap detection</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-low_service_flap_threshold" 
xreflabel="Low Service Flap Threshold"/>Low Service Flap Threshold</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>low_service_flap_threshold=&lt;percent&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>low_service_flap_threshold=25.0</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option is used to set the low threshold for detection of service 
flapping. For more information on how flap detection and handling works (and 
how this option affects things) read <link 
linkend="advancedtopics-flapping">this</link>.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-high_service_flap_threshold" 
xreflabel="High Service Flap Threshold"/>High Service Flap Threshold</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>high_service_flap_threshold=&lt;percent&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>high_service_flap_threshold=50.0</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option is used to set the high threshold for detection of service 
flapping. For more information on how flap detection and handling works (and 
how this option affects things) read <link 
linkend="advancedtopics-flapping">this</link>.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-low_host_flap_threshold" 
xreflabel="Low Host Flap Threshold"/>Low Host Flap Threshold</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>low_host_flap_threshold=&lt;percent&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>low_host_flap_threshold=25.0</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option is used to set the low threshold for detection of host 
flapping. For more information on how flap detection and handling works (and 
how this option affects things) read <link 
linkend="advancedtopics-flapping">this</link>.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-high_host_flap_threshold" 
xreflabel="High Host Flap Threshold"/>High Host Flap Threshold</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>high_host_flap_threshold=&lt;percent&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>high_host_flap_threshold=50.0</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option is used to set the high threshold for detection of host 
flapping. For more information on how flap detection and handling works (and 
how this option affects things) read <link 
linkend="advancedtopics-flapping">this</link>.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-soft_state_dependencies" 
xreflabel="Soft State Dependencies Option"/>Soft State Dependencies Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>soft_state_dependencies=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>soft_state_dependencies=0</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines whether or not Nagios will use soft state information 
when checking <link linkend="advancedtopics-dependencies">host and service 
dependencies</link>. Normally Nagios will only use the latest hard host or 
service state when checking dependencies. If you want it to use the latest 
state (regardless of whether its a soft or hard <link 
linkend="thebasics-statetypes">state type</link>), enable this option.</para>

      <itemizedlist>
        <listitem>
          <para>0 = Don't use soft state dependencies (default)</para>
        </listitem>

        <listitem>
          <para>1 = Use soft state dependencies</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-service_check_timeout" 
xreflabel="Service Check Timeout"/>Service Check Timeout</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>service_check_timeout=&lt;seconds&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>service_check_timeout=60</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This is the maximum number of seconds that Nagios will allow service checks 
to run. If checks exceed this limit, they are killed and a CRITICAL state is 
returned. A timeout error will also be logged.</para>

      <para>There is often widespread confusion as to what this option really does. It 
is meant to be used as a last ditch mechanism to kill off plugins which are 
misbehaving and not exiting in a timely manner. It should be set to 
something high (like 60 seconds or more), so that each service check 
normally finishes executing within this time limit. If a service check runs 
longer than this limit, Nagios will kill it off thinking it is a runaway 
processes.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-host_check_timeout" xreflabel="Host 
Check Timeout"/>Host Check Timeout</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>host_check_timeout=&lt;seconds&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>host_check_timeout=60</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This is the maximum number of seconds that Nagios will allow host checks to 
run. If checks exceed this limit, they are killed and a CRITICAL state is 
returned and the host will be assumed to be DOWN. A timeout error will also 
be logged.</para>

      <para>There is often widespread confusion as to what this option really does. It 
is meant to be used as a last ditch mechanism to kill off plugins which are 
misbehaving and not exiting in a timely manner. It should be set to 
something high (like 60 seconds or more), so that each host check normally 
finishes executing within this time limit. If a host check runs longer than 
this limit, Nagios will kill it off thinking it is a runaway processes.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-event_handler_timeout" 
xreflabel="Event Handler Timeout"/>Event Handler Timeout</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>event_handler_timeout=&lt;seconds&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>event_handler_timeout=60</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This is the maximum number of seconds that Nagios will allow <link 
linkend="advancedtopics-eventhandlers">event handlers</link> to be run. If 
an event handler exceeds this time limit it will be killed and a warning 
will be logged.</para>

      <para>There is often widespread confusion as to what this option really does. It 
is meant to be used as a last ditch mechanism to kill off commands which are 
misbehaving and not exiting in a timely manner. It should be set to 
something high (like 60 seconds or more), so that each event handler command 
normally finishes executing within this time limit. If an event handler runs 
longer than this limit, Nagios will kill it off thinking it is a runaway 
processes.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-notification_timeout" 
xreflabel="Notification Timeout"/>Notification Timeout</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>notification_timeout=&lt;seconds&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>notification_timeout=60</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This is the maximum number of seconds that Nagios will allow notification 
commands to be run. If a notification command exceeds this time limit it 
will be killed and a warning will be logged.</para>

      <para>There is often widespread confusion as to what this option really does. It 
is meant to be used as a last ditch mechanism to kill off commands which are 
misbehaving and not exiting in a timely manner. It should be set to 
something high (like 60 seconds or more), so that each notification command 
finishes executing within this time limit. If a notification command runs 
longer than this limit, Nagios will kill it off thinking it is a runaway 
processes.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-ocsp_timeout" xreflabel="Obsessive 
Compulsive Service Processor Timeout"/>Obsessive Compulsive Service 
Processor Timeout</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>ocsp_timeout=&lt;seconds&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>ocsp_timeout=5</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This is the maximum number of seconds that Nagios will allow an <link 
linkend="configuringnagios-configmain-ocsp_command">obsessive compulsive 
service processor command</link> to be run. If a command exceeds this time 
limit it will be killed and a warning will be logged.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-ochp_timeout" xreflabel="Obsessive 
Compulsive Host Processor Timeout"/>Obsessive Compulsive Host Processor 
Timeout</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>ochp_timeout=&lt;seconds&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>ochp_timeout=5</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This is the maximum number of seconds that Nagios will allow an <xref 
linkend="configuringnagios-configmain-ochp_command" /> to be run. If a 
command exceeds this time limit it will be killed and a warning will be 
logged.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-perfdata_timeout" 
xreflabel="Performance Data Processor Command Timeout"/>Performance Data 
Processor Command Timeout</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>perfdata_timeout=&lt;seconds&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>perfdata_timeout=5</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This is the maximum number of seconds that Nagios will allow a <link 
linkend="configuringnagios-configmain-host_perfdata_file_processing_command">host 
performance data processor command</link> or <link 
linkend="configuringnagios-configmain-service_perfdata_file_processing_command">service 
performance data processor command</link> to be run.  If a command exceeds 
this time limit it will be killed and a warning will be logged.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-obsess_over_services" 
xreflabel="Obsess Over Services Option" />Obsess Over Services Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>obsess_over_services=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>obsess_over_services=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This value determines whether or not Nagios will <quote>obsess</quote> over 
service checks results and run the <link 
linkend="configuringnagios-configmain-ocsp_command">obsessive compulsive 
service processor command</link> you define. I know - funny name, but it was 
all I could think of. This option is useful for performing <link 
linkend="advancedtopics-distributed">distributed monitoring</link>. If 
you're not doing distributed monitoring, don't enable this option.</para>

      <itemizedlist>
        <listitem>
          <para>0 = Don't obsess over services (default)</para>
        </listitem>

        <listitem>
          <para>1 = Obsess over services</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-ocsp_command" xreflabel="Obsessive 
Compulsive Service Processor Command"/>Obsessive Compulsive Service 
Processor Command</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>ocsp_command=&lt;command&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>ocsp_command=obsessive_service_handler</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option allows you to specify a command to be run after every service 
check, which can be useful in <link 
linkend="advancedtopics-distributed">distributed monitoring</link>. This 
command is executed after any <link 
linkend="advancedtopics-eventhandlers">event handler</link> or <link 
linkend="thebasics-notifications">notification</link> commands. The command 
argument is the short name of a <link 
linkend="configuringnagios-objectdefinitions-command">command 
definition</link> that you define in your object configuration file. The 
maximum amount of time that this command can run is controlled by the <xref 
linkend="configuringnagios-configmain-ocsp_timeout" /> option. More 
information on distributed monitoring can be found <link 
linkend="advancedtopics-distributed">here</link>. This command is only 
executed if the <xref 
linkend="configuringnagios-configmain-obsess_over_services" /> option is 
enabled globally and if the <code>obsess_over_service</code> directive in the <link 
linkend="configuringnagios-objectdefinitions-service">service 
definition</link> is enabled.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-obsess_over_hosts" 
xreflabel="Obsess Over Hosts Option" />Obsess Over Hosts Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>obsess_over_hosts=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>obsess_over_hosts=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This value determines whether or not Nagios will <quote>obsess</quote> over 
host checks results and run the <link 
linkend="configuringnagios-configmain-ochp_command">obsessive compulsive 
host processor command</link> you define. I know - funny name, but it was 
all I could think of. This option is useful for performing <link 
linkend="advancedtopics-distributed">distributed monitoring</link>. If 
you're not doing distributed monitoring, don't enable this option.</para>

      <itemizedlist>
        <listitem>
          <para>0 = Don't obsess over hosts (default)</para>
        </listitem>

        <listitem>
          <para>1 = Obsess over hosts</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-ochp_command" xreflabel="Obsessive 
Compulsive Host Processor Command" />Obsessive Compulsive Host Processor 
Command</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>ochp_command=&lt;command&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>ochp_command=obsessive_host_handler</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option allows you to specify a command to be run after every host 
check, which can be useful in <link 
linkend="advancedtopics-distributed">distributed monitoring</link>. This 
command is executed after any <link 
linkend="advancedtopics-eventhandlers">event handler</link> or <link 
linkend="thebasics-notifications">notification</link> commands. The command 
argument is the short name of a <link 
linkend="configuringnagios-objectdefinitions-command">command 
definition</link> that you define in your object configuration file. The 
maximum amount of time that this command can run is controlled by the <xref 
linkend="configuringnagios-configmain-ochp_timeout" /> option. More 
information on distributed monitoring can be found <link 
linkend="advancedtopics-distributed">here</link>. This command is only 
executed if the <xref 
linkend="configuringnagios-configmain-obsess_over_hosts" /> option is 
enabled globally and if the <code>obsess_over_host</code> directive in the <link 
linkend="configuringnagios-objectdefinitions-host">host definition</link> is 
enabled.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-process_performance_data" 
xreflabel="Performance Data Processing Option"/>Performance Data Processing 
Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>process_performance_data=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>process_performance_data=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This value determines whether or not Nagios will process host and service 
check <link linkend="advancedtopics-perfdata">performance data</link>.</para>

      <itemizedlist>
        <listitem>
          <para>0 = Don't process performance data (default)</para>
        </listitem>

        <listitem>
          <para>1 = Process performance data</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-host_perfdata_command" 
xreflabel="Host Performance Data Processing Command"/>Host Performance Data 
Processing Command</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>host_perfdata_command=&lt;command&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>host_perfdata_command=process-host-perfdata</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option allows you to specify a command to be run after every host check 
to process host <link linkend="advancedtopics-perfdata">performance 
data</link> that may be returned from the check. The command argument is the 
short name of a <link 
linkend="configuringnagios-objectdefinitions-command">command 
definition</link> that you define in your object configuration file. This 
command is only executed if the <xref 
linkend="configuringnagios-configmain-process_performance_data" /> option is 
enabled globally and if the <code>process_perf_data</code> directive in the <link 
linkend="configuringnagios-objectdefinitions-host">host definition</link> is 
enabled.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-service_perfdata_command" 
xreflabel="Service Performance Data Processing Command"/>Service Performance 
Data Processing Command</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>service_perfdata_command=&lt;command&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>service_perfdata_command=process-service-perfdata</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option allows you to specify a command to be run after every service 
check to process service <link linkend="advancedtopics-perfdata">performance 
data</link> that may be returned from the check. The command argument is the 
short name of a <link 
linkend="configuringnagios-objectdefinitions-command">command 
definition</link> that you define in your object configuration file. This 
command is only executed if the <link 
linkend="configuringnagios-configmain-process_performance_data">process_performance_data</link> 
option is enabled globally and if the <code>process_perf_data</code> directive in the <link 
linkend="configuringnagios-objectdefinitions-service">service 
definition</link> is enabled.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-host_perfdata_file" xreflabel="Host 
Performance Data File"/>Host Performance Data File</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>host_perfdata_file=&lt;file_name&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>host_perfdata_file=/usr/local/nagios/var/host-perfdata.dat</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option allows you to specify a file to which host <link 
linkend="advancedtopics-perfdata">performance data</link> will be written 
after every host check. Data will be written to the performance file as 
specified by the <xref 
linkend="configuringnagios-configmain-host_perfdata_file_template" /> 
option. Performance data is only written to this file if the <xref 
linkend="configuringnagios-configmain-process_performance_data" /> option is 
enabled globally and if the <code>process_perf_data</code> directive in the <link 
linkend="configuringnagios-objectdefinitions-host">host definition</link> is 
enabled.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-service_perfdata_file" 
xreflabel="Service Performance Data File"/>Service Performance Data File</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>service_perfdata_file=&lt;file_name&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>service_perfdata_file=/usr/local/nagios/var/service-perfdata.dat</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option allows you to specify a file to which service <link 
linkend="advancedtopics-perfdata">performance data</link> will be written 
after every service check. Data will be written to the performance file as 
specified by the <xref 
linkend="configuringnagios-configmain-service_perfdata_file_template" /> 
option. Performance data is only written to this file if the <xref 
linkend="configuringnagios-configmain-process_performance_data" /> option is 
enabled globally and if the <code>process_perf_data</code> directive in the <link 
linkend="configuringnagios-objectdefinitions-service">service 
definition</link> is enabled.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-host_perfdata_file_template" 
xreflabel="Host Performance Data File Template"/>Host Performance Data File 
Template</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>host_perfdata_file_template=&lt;template&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>host_perfdata_file_template=[HOSTPERFDATA]\t$TIMET$\t$HOSTNAME$\t$HOSTEXECUTIONTIME$\t$HOSTOUTPUT$\t$HOSTPERFDATA$</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines what (and how) data is written to the <link 
linkend="configuringnagios-configmain-host_perfdata_file">host performance 
data file</link>.  The template may contain <link 
linkend="thebasics-macros">macros</link>, special characters (\t for tab, \r 
for carriage return, \n for newline) and plain text. A newline is 
automatically added after each write to the performance data file.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-service_perfdata_file_template" 
xreflabel="Service Performance Data File Template"/>Service Performance Data 
File Template</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>service_perfdata_file_template=&lt;template&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>service_perfdata_file_template=[SERVICEPERFDATA]\t$TIMET$\t$HOSTNAME$\t$SERVICEDESC$\t$SERVICEEXECUTIONTIME$\t$SERVICELATENCY$\t$SERVICEOUTPUT$\t$SERVICEPERFDATA$</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines what (and how) data is written to the <link 
linkend="configuringnagios-configmain-service_perfdata_file">service 
performance data file</link>.  The template may contain <link 
linkend="thebasics-macros">macros</link>, special characters (\t for tab, \r 
for carriage return, \n for newline) and plain text. A newline is 
automatically added after each write to the performance data file.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-host_perfdata_file_mode" 
xreflabel="Host Performance Data File Mode"/>Host Performance Data File Mode</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>host_perfdata_file_mode=&lt;mode&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>host_perfdata_file_mode=a</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines how the <link 
linkend="configuringnagios-configmain-host_perfdata_file">host performance 
data file</link> is opened. Unless the file is a named pipe you'll probably 
want to use the default mode of append.</para>

      <itemizedlist>
        <listitem>
          <para>a = Open file in append mode (default)</para>
        </listitem>

        <listitem>
          <para>w = Open file in write mode</para>
        </listitem>

        <listitem>
          <para>p = Open in non-blocking read/write mode (useful when writing to pipes)</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-service_perfdata_file_mode" 
xreflabel="Service Performance Data File Mode"/>Service Performance Data 
File Mode</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>service_perfdata_file_mode=&lt;mode&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>service_perfdata_file_mode=a</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines how the <link 
linkend="configuringnagios-configmain-service_perfdata_file">service 
performance data file</link> is opened. Unless the file is a named pipe 
you'll probably want to use the default mode of append.</para>

      <itemizedlist>
        <listitem>
          <para>a = Open file in append mode (default)</para>
        </listitem>

        <listitem>
          <para>w = Open file in write mode</para>
        </listitem>

        <listitem>
          <para>p = Open in non-blocking read/write mode (useful when writing to pipes)</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor 
id="configuringnagios-configmain-host_perfdata_file_processing_interval" 
xreflabel="Host Performance Data File Processing Interval"/>Host Performance 
Data File Processing Interval</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>host_perfdata_file_processing_interval=&lt;seconds&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>host_perfdata_file_processing_interval=0</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option allows you to specify the interval (in seconds) at which the 
<link linkend="configuringnagios-configmain-host_perfdata_file">host 
performance data file</link> is processed using the <link 
linkend="configuringnagios-configmain-host_perfdata_command">host 
performance data file processing command</link>. A value of 0 indicates that 
the performance data file should not be processed at regular intervals.</para>
    </section>

    <section>
      <title><anchor 
id="configuringnagios-configmain-service_perfdata_file_processing_interval" 
xreflabel="Service Performance Data File Processing Interval"/>Service 
Performance Data File Processing Interval</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>service_perfdata_file_processing_interval=&lt;seconds&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>service_perfdata_file_processing_interval=0</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option allows you to specify the interval (in seconds) at which the 
<link linkend="configuringnagios-configmain-service_perfdata_file">service 
performance data file</link> is processed using the <link 
linkend="configuringnagios-configmain-service_perfdata_command">service 
performance data file processing command</link>. A value of 0 indicates that 
the performance data file should not be processed at regular intervals.</para>
    </section>

    <section>
      <title><anchor 
id="configuringnagios-configmain-host_perfdata_file_processing_command" 
xreflabel="Host Performance Data File Processing Command"/>Host Performance 
Data File Processing Command</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>host_perfdata_file_processing_command=&lt;command&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>host_perfdata_file_processing_command=process-host-perfdata-file</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option allows you to specify the command that should be executed to 
process the <link 
linkend="configuringnagios-configmain-host_perfdata_file">host performance 
data file</link>. The command argument is the short name of a <link 
linkend="configuringnagios-objectdefinitions-command">command 
definition</link> that you define in your object configuration file. The 
interval at which this command is executed is determined by the <link 
linkend="configuringnagios-configmain-host_perfdata_file_processing_interval">host_perfdata_file_processing_interval</link> 
directive.</para>
    </section>

    <section>
      <title><anchor 
id="configuringnagios-configmain-service_perfdata_file_processing_command" 
xreflabel="Service Performance Data File Processing Command"/>Service 
Performance Data File Processing Command</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>service_perfdata_file_processing_command=&lt;command&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>service_perfdata_file_processing_command=process-service-perfdata-file</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option allows you to specify the command that should be executed to 
process the <link 
linkend="configuringnagios-configmain-service_perfdata_file">service 
performance data file</link>. The command argument is the short name of a 
<link 
linkend="configuringnagios-configmain-service_perfdata_command">command 
definition</link> that you define in your object configuration file. The 
interval at which this command is executed is determined by the <xref 
linkend="configuringnagios-configmain-service_perfdata_file_processing_interval" 
/> directive.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-check_for_orphaned_services" 
xreflabel="Orphaned Service Check Option"/>Orphaned Service Check Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>check_for_orphaned_services=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>check_for_orphaned_services=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <simpara>This option allows you to enable or disable checks for orphaned service 
checks. Orphaned service checks are checks which have been executed and have 
been removed from the event queue, but have not had any results reported in 
a long time.</simpara>
      <simpara>Since no results have come back in for the service, it is not rescheduled in 
the event queue. This can cause service checks to stop being 
executed. Normally it is very rare for this to happen - it might happen if 
an external user or process killed off the process that was being used to 
execute a service check.</simpara>
      <simpara>If this option is enabled and Nagios finds that results for a particular 
service check have not come back, it will log an error message and 
reschedule the service check. If you start seeing service checks that never 
seem to get rescheduled, enable this option and see if you notice any log 
messages about orphaned services.</simpara>

      <itemizedlist>
        <listitem>
          <para>0 = Don't check for orphaned service checks</para>
        </listitem>

        <listitem>
          <para>1 = Check for orphaned service checks (default)</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-check_for_orphaned_hosts" 
xreflabel="Orphaned Host Check Option"/>Orphaned Host Check Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>check_for_orphaned_hosts=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>check_for_orphaned_hosts=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <simpara>This option allows you to enable or disable checks for orphaned hoste 
checks. Orphaned host checks are checks which have been executed and have 
been removed from the event queue, but have not had any results reported in 
a long time.</simpara>
      <simpara>Since no results have come back in for the host, it is not rescheduled in 
the event queue. This can cause host checks to stop being executed. Normally 
it is very rare for this to happen - it might happen if an external user or 
process killed off the process that was being used to execute a host check.</simpara>
      <simpara>If this option is enabled and Nagios finds that results for a particular 
host check have not come back, it will log an error message and reschedule 
the host check. If you start seeing host checks that never seem to get 
rescheduled, enable this option and see if you notice any log messages about 
orphaned hosts.</simpara>

      <itemizedlist>
        <listitem>
          <para>0 = Don't check for orphaned host checks</para>
        </listitem>

        <listitem>
          <para>1 = Check for orphaned host checks (default)</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-check_service_freshness" 
xreflabel="Service Freshness Checking Option"/>Service Freshness Checking 
Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>check_service_freshness=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>check_service_freshness=0</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines whether or not Nagios will periodically check the 
<quote>freshness</quote> of service checks. Enabling this option is useful 
for helping to ensure that <link linkend="thebasics-passivechecks">passive 
service checks</link> are received in a timely manner. More information on 
freshness checking can be found <link 
linkend="advancedtopics-freshness">here</link>.</para>

      <itemizedlist>
        <listitem>
          <para>0 = Don't check service freshness</para>
        </listitem>

        <listitem>
          <para>1 = Check service freshness (default)</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-service_freshness_check_interval" 
xreflabel="Service Freshness Check Interval"/>Service Freshness Check 
Interval</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>service_freshness_check_interval=&lt;seconds&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>service_freshness_check_interval=60</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This setting determines how often (in seconds) Nagios will periodically 
check the <quote>freshness</quote> of service check results. If you have 
disabled service freshness checking (with the <link 
linkend="configuringnagios-configmain-check_service_freshness">check_service_freshness</link> 
option), this option has no effect. More information on freshness checking 
can be found <link linkend="advancedtopics-freshness">here</link>.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-check_host_freshness" 
xreflabel="Host Freshness Checking Option"/>Host Freshness Checking Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>check_host_freshness=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>check_host_freshness=0</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines whether or not Nagios will periodically check the 
<quote>freshness</quote> of host checks. Enabling this option is useful for 
helping to ensure that <link linkend="thebasics-passivechecks">passive host 
checks</link> are received in a timely manner. More information on freshness 
checking can be found <link linkend="advancedtopics-freshness">here</link>.</para>

      <itemizedlist>
        <listitem>
          <para>0 = Don't check host freshness</para>
        </listitem>

        <listitem>
          <para>1 = Check host freshness (default)</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-host_freshness_check_interval" 
xreflabel="Host Freshness Check Interval"/>Host Freshness Check Interval</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>host_freshness_check_interval=&lt;seconds&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>host_freshness_check_interval=60</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This setting determines how often (in seconds) Nagios will periodically 
check the <quote>freshness</quote> of host check results. If you have 
disabled host freshness checking (with the <link 
linkend="configuringnagios-configmain-check_host_freshness">check_host_freshness</link> 
option), this option has no effect. More information on freshness checking 
can be found <link linkend="advancedtopics-freshness">here</link>.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-additional_freshness_latency" 
xreflabel="Additional Freshness Threshold Latency Option"/>Additional 
Freshness Threshold Latency Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>additional_freshness_latency=&lt;#&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>additional_freshness_latency=15</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines the number of seconds Nagios will add to any host or 
services freshness threshold it automatically calculates (e.g. those not 
specified explicity by the user). More information on freshness checking can 
be found <link linkend="advancedtopics-freshness">here</link>.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-enable_embedded_perl" 
xreflabel="Embedded Perl Interpreter Option"/>Embedded Perl Interpreter 
Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>enable_embedded_perl=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>enable_embedded_perl=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This setting determines whether or not the embedded Perl interpreter is 
enabled on a program-wide basis. Nagios must be compiled with support for 
embedded Perl for this option to have an effect. More information on the 
embedded Perl interpreter can be found <link 
linkend="advancedtopics-embeddedperl">here</link>.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-use_embedded_perl_implicitly" 
xreflabel="Embedded Perl Implicit Use Option"/>Embedded Perl Implicit Use 
Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>use_embedded_perl_implicitly=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>use_embedded_perl_implicitly=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This setting determines whether or not the embedded Perl interpreter should 
be used for Perl plugins/scripts that do not explicitly enable/disable 
it. Nagios must be compiled with support for embedded Perl for this option 
to have an effect. More information on the embedded Perl interpreter and the 
effect of this setting can be found <link 
linkend="advancedtopics-embeddedperl">here</link>.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-date_format" xreflabel="Date 
Format"/>Date Format</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>date_format=&lt;option&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>date_format=us</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option allows you to specify what kind of date/time format Nagios 
should use in the web interface and date/time <link 
linkend="thebasics-macros">macros</link>. Possible options (along with 
example output) include:</para>

      <informaltable frame="all">
        <tgroup cols="3">
	<thead>
            <row>
              <entry><para>Option</para></entry>

              <entry><para>Output Format</para></entry>

              <entry><para>Sample Output</para></entry>
            </row>
	</thead>
	<tbody>

            <row>
              <entry><para>us</para></entry>

              <entry><para>MM/DD/YYYY HH:MM:SS</para></entry>

              <entry><para>06/30/2002 03:15:00</para></entry>
            </row>

            <row>
              <entry><para>euro</para></entry>

              <entry><para>DD/MM/YYYY HH:MM:SS</para></entry>

              <entry><para>30/06/2002 03:15:00</para></entry>
            </row>

            <row>
              <entry><para>iso8601</para></entry>

              <entry><para>YYYY-MM-DD HH:MM:SS</para></entry>

              <entry><para>2002-06-30 03:15:00</para></entry>
            </row>

            <row>
              <entry><para>strict-iso8601</para></entry>

              <entry><para>YYYY-MM-DDTHH:MM:SS</para></entry>

              <entry><para>2002-06-30T03:15:00</para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-use_timezone" xreflabel="Timezone 
Option"/>Timezone Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>use_timezone=&lt;tz&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>use_timezone=US/Mountain</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option allows you to override the default timezone that this instance 
of Nagios runs in. Useful if you have multiple instances of Nagios that need 
to run from the same server, but have different local times associated with 
them. If not specified, Nagios will use the system configured timezone.</para>

      <note>
        <para>If you use this option to specify a custom timezone, you will also need to 
alter the Apache configuration directives for the CGIs to specify the 
timezone you want. Example:</para>
      </note>

      <para>
      <programlisting>
      &lt;Directory "/usr/local/nagios/sbin/"&gt;
      SetEnv TZ "US/Mountain"
      ...
      &lt;/Directory&gt;
      </programlisting>
      </para>

    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-illegal_object_name_chars" 
xreflabel="Illegal Object Name Characters"/>Illegal Object Name Characters</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>illegal_object_name_chars=&lt;chars...&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>illegal_object_name_chars=`~!$%^&amp;*"|'&lt;&gt;?,()=</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option allows you to specify illegal characters that cannot be used in 
host names, service descriptions, or names of other object types. Nagios 
will allow you to use most characters in object definitions, but I recommend 
not using the characters shown in the example above. Doing may give you 
problems in the web interface, notification commands, etc.</para>
    </section>

    <section>
<title><anchor id="configuringnagios-configmain-illegal_macro_output_chars" 
xreflabel="Illegal Macro Output Characters"/>Illegal Macro Output Characters</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>illegal_macro_output_chars=&lt;chars...&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>illegal_macro_output_chars=`~$^&amp;"|'&lt;&gt;</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option allows you to specify illegal characters that should be stripped 
from <link linkend="thebasics-macros">macros</link> before being used in 
notifications, event handlers, and other commands. This DOES NOT affect 
macros used in service or host check commands. You can choose to not strip 
out the characters shown in the example above, but I recommend you do not do 
this. Some of these characters are interpreted by the shell (i.e. the 
backtick) and can lead to security problems. The following macros are 
stripped of the characters you specify:</para>
      <itemizedlist spacing="compact">
      	<listitem><para><varname>$HOSTOUTPUT$</varname></para></listitem>
	<listitem><para><varname>$HOSTPERFDATA$</varname></para></listitem>
	<listitem><para><varname>$HOSTACKAUTHOR$</varname></para></listitem>
	<listitem><para><varname>$HOSTACKCOMMENT$</varname></para></listitem>
	<listitem><para><varname>$SERVICEOUTPUT$</varname></para></listitem>
	<listitem><para><varname>$SERVICEPERFDATA$</varname></para></listitem>
	<listitem><para><varname>$SERVICEACKAUTHOR$</varname></para></listitem>
	<listitem><para><varname>$SERVICEACKCOMMENT$</varname></para></listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-use_regexp_matching" 
xreflabel="Regular Expression Matching Option"/>Regular Expression Matching 
Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>use_regexp_matching=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>use_regexp_matching=0</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines whether or not various directives in your <xref 
linkend="configuringnagios-configobject" /> will be processed as regular 
expressions. More information on how this works can be found <link 
linkend="advancedtopics-objecttricks">here</link>.</para>

      <itemizedlist>
        <listitem>
          <para>0 = Don't use regular expression matching (default)</para>
        </listitem>

        <listitem>
          <para>1 = Use regular expression matching</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-use_true_regexp_matching" 
xreflabel="True Regular Expression Matching Option"/>True Regular Expression 
Matching Option</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>use_true_regexp_matching=&lt;0/1&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>use_true_regexp_matching=0</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>If you've enabled regular expression matching of various object directives 
using the <xref linkend="configuringnagios-configmain-use_regexp_matching" 
/> option, this option will determine when object directives are treated as 
regular expressions. If this option is disabled (the default), directives 
will only be treated as regular expressions if they contain *, ?, +, or \..  
If this option is enabled, all appropriate directives will be treated as 
regular expression - be careful when enabling this! More information on how 
this works can be found <link 
linkend="advancedtopics-objecttricks">here</link>.</para>

      <itemizedlist>
        <listitem>
          <para>0 = Don't use true regular expression matching (default)</para>
        </listitem>

        <listitem>
          <para>1 = Use true regular expression matching</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-admin_email" 
xreflabel="Administrator Email Address"/>Administrator Email Address</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>admin_email=&lt;email_address&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>admin_email=root@localhost.localdomain</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This is the email address for the administrator of the local machine 
(i.e. the one that Nagios is running on). This value can be used in 
notification commands by using the <varname>$ADMINEMAIL$</varname> <link 
linkend="thebasics-macros">macro</link>.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-admin_pager" 
xreflabel="Administrator Pager"/>Administrator Pager</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>admin_pager=&lt;pager_number_or_pager_email_gateway&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>admin_pager=pageroot@localhost.localdomain</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This is the pager number (or pager email gateway) for the administrator of 
the local machine (i.e. the one that Nagios is running on). The pager 
number/address can be used in notification commands by using the 
$ADMINPAGER$ <link linkend="thebasics-macros">macro</link>.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-event_broker_options" 
xreflabel="Event Broker Options"/>Event Broker Options</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>event_broker_options=&lt;#&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>event_broker_options=-1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option controls what (if any) data gets sent to the event broker and, 
in turn, to any loaded event broker modules. This is an advanced 
option. When in doubt, either broker nothing (if not using event broker 
modules) or broker everything (if using event broker modules). Possible 
values are shown below.</para>

      <itemizedlist>
        <listitem>
          <para>0 = Broker nothing</para>
        </listitem>

        <listitem>
          <para>-1 = Broker everything</para>
        </listitem>

        <listitem>
          <para># = See BROKER_* definitions in source code 
(<filename>include/broker.h</filename>)  for other values that can be OR'ed 
together</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-broker_module" xreflabel="Event 
Broker Modules"/>Event Broker Modules</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>broker_module=&lt;modulepath&gt; [moduleargs]</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>broker_module=/usr/local/nagios/bin/ndomod.o
              cfg_file=/usr/local/nagios/etc/ndomod.cfg</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This directive is used to specify an event broker module that should by 
loaded by Nagios at startup. Use multiple directives if you want to load 
more than one module. Arguments that should be passed to the module at 
startup are seperated from the module path by a space.</para>

      <warning><para>Do NOT overwrite modules while they are being used by Nagios or Nagios will 
crash in a fiery display of SEGFAULT glory. This is a bug/limitation either 
in <function>dlopen()</function>, the kernel, and/or the filesystem.  And 
maybe Nagios...</para></warning>

      <para>The correct/safe way of updating a module is by using one of these methods:</para>

      <itemizedlist>
        <listitem>
          <para>Shutdown Nagios, replace the module file, restart Nagios</para>
        </listitem>

        <listitem>
          <para>While Nagios is running... delete the original module file, move the new 
module file into place, restart Nagios</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-debug_file" xreflabel="Debug 
File"/>Debug File</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>debug_file=&lt;file_name&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>debug_file=/usr/local/nagios/var/nagios.debug</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines where Nagios should write debugging information. What 
(if any) information is written is determined by the <xref 
linkend="configuringnagios-configmain-debug_level" /> and <xref 
linkend="configuringnagios-configmain-debug_verbosity" /> options. You can 
have Nagios automaticaly rotate the debug file when it reaches a certain 
size by using the <xref 
linkend="configuringnagios-configmain-max_debug_file_size" /> option.</para>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-debug_level" xreflabel="Debug 
Level"/>Debug Level</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>debug_level=&lt;#&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>debug_level=24</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines what type of information Nagios should write to the 
<xref linkend="configuringnagios-configmain-debug_file" />. This value is a 
logical OR of the values below.</para>

      <itemizedlist>
        <listitem>
          <para>-1 = Log everything</para>
        </listitem>

        <listitem>
          <para>0 = Log nothing (default)</para>
        </listitem>

        <listitem>
          <para>1 = Function enter/exit information</para>
        </listitem>

        <listitem>
          <para>2 = Config information</para>
        </listitem>

        <listitem>
          <para>4 = Process information</para>
        </listitem>

        <listitem>
          <para>8 = Scheduled event information</para>
        </listitem>

        <listitem>
          <para>16 = Host/service check information</para>
        </listitem>

        <listitem>
          <para>32 = Notification information</para>
        </listitem>

        <listitem>
          <para>64 = Event broker information</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-debug_verbosity" xreflabel="Debug 
Verbosity"/>Debug Verbosity</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>debug_verbosity=&lt;#&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>debug_verbosity=1</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines how much debugging information Nagios should write to 
the <xref linkend="configuringnagios-configmain-debug_file" />.</para>

      <itemizedlist>
        <listitem>
          <para>0 = Basic information</para>
        </listitem>

        <listitem>
          <para>1 = More detailed information (default)</para>
        </listitem>

        <listitem>
          <para>2 = Highly detailed information</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title><anchor id="configuringnagios-configmain-max_debug_file_size" 
xreflabel="Maximum Debug File Size"/>Maximum Debug File Size</title>

      <informaltable frame="none" rowsep="0" colsep="0">
        <tgroup cols="2">
	<colspec colnum="1" colwidth="15*"/>
	<colspec colnum="2" colwidth="85*"/>
          <tbody>
            <row>
              <entry><para>Format:</para></entry>

              <entry><para><programlisting>max_debug_file_size=&lt;#&gt;</programlisting></para></entry>
            </row>

            <row>
              <entry><para>Example:</para></entry>

              <entry><para><programlisting>max_debug_file_size=1000000</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This option determines the maximum size (in bytes) of the <link 
linkend="configuringnagios-configmain-debug_file">debug file</link>. If the 
file grows larger than this size, it will be renamed with a .old 
extension. If a file already exists with a .old extension it will 
automatically be deleted. This helps ensure your disk space usage doesn't 
get out of control when debugging Nagios.</para>

    </section>
  </section>
</chapter>

