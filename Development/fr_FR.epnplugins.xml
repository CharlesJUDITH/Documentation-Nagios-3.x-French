<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd"
[
 <!ENTITY % all.entities SYSTEM "../all-entities.ent">
 %all.entities;
]
>
<chapter id="development-epnplugins" xreflabel="Developing Plugins For Use With Embedded Perl">
    <title>Développement de plugins pour être utilisés avec Perl intégré à Nagios</title>
    
    <section>
        <title>Introduction</title>
        
        <para>
            <personname>
                <firstname>Stanley</firstname><surname>Hopcroft</surname>
            </personname>
            abeaucoup travaillé sur l'interpréteur Perl intégré et a
            commenté les avantages et désavantages de son utilisation. Il a également
            donné plusieurs trucs utiles pour écrire des plugins Perl qui fonctionnent
            correctement avec l'interpréteur intégré. La majeure partie de cette
            documentation provient de ses commentaires. 
        </para>
        
        <para>
             Notez que <emphasis>ePN</emphasis>, tel qu'il est utilisé dans cette
            documentation, fait référence à Perl intégré à Nagios [embedded Perl
            Nagios], ou si vous préférez, Nagios compilé avec un interpréteur Perl
            intégré.
        </para>
    </section>
    
    <section>
        <title>Public visé</title>
        
        <itemizedlist>
            <listitem>
                <para>Développeurs Perl de niveau moyen; ceux qui qui ont une idée des puissantes
                    fonctionnnalités du langage sans en avoir une connaissance appronfondie.
                </para>
            </listitem>
            
            <listitem>
                <para>Ceux qui ont une appréciation pratique plutôt qu'un grand niveau de
                    compréhension.
                </para>
            </listitem>
            
            <listitem>
                <para>Si vous êtes à l'aise avec les objets Perl, la gestion de nom, les
                    structures de données et le déboguer, ça devrait suffire.
                </para>
            </listitem>
        </itemizedlist>
    </section>
    
    <section>
        <title>Les choses que vous devriez faire quand vous développez un plugin Perl (ePN
            ou pas)
        </title>
        
        <itemizedlist>
            <listitem>
                <para>Générez toujours un affichage</para>
            </listitem>
            
            <listitem>
                <para>
                    Utilisez <literal>use utils</literal> et importez ce qui en est exporté
                    ($TIMEOUT %ERRORS &amp;print_revision &amp;support)
                </para>
            </listitem>
            
            <listitem>
                <para>Jetez un œil sur la façon dont sont écrits les plugins Perl standards, comme
                    par exemple :
                </para>
                
                <itemizedlist>
                    <listitem>
                        <para>
                            Quittez toujours avec une valeur <literal>$ERRORS{CRITICAL}</literal>, <literal>$ERRORS{OK}</literal>, etc. 
                        </para>
                    </listitem>
                    
                    <listitem>
                        <para>Utilisez getopt pour lire les paramètres de la ligne de commande </para>
                    </listitem>
                    
                    <listitem>
                        <para>Gérez les dépassements de délai </para>
                    </listitem>
                    
                    <listitem>
                        <para>
                            Appelez <literal>print_usage</literal> (que vous fournissez) quand il n'y a pas de paramètre à
                            la commande 
                        </para>
                    </listitem>
                    
                    <listitem>
                        <para>Utilisez des noms de paramètres standard (par exemple H 'host', V 'version') </para>
                    </listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>
    </section>
    
    <section>
        <title>Ce que vous devez faire quand vous écrivez un plugin Perl pour ePN </title>
        
        <orderedlist>
            <listitem>
                <para>
                    <code language="perl">&lt;DATA&gt;</code> ne peut pas être utilisé ; utilisez ici des documents à la place, par
                    exemple :
                </para>
                
                <programlisting>
my $data = &lt;&lt;DATA;
portmapper 100000
portmap 100000
sunrpc 100000
rpcbind 100000
rstatd 100001
rstat 100001
rup 100001
..
DATA

%prognum = map { my($a, $b) = split; ($a, $b) } split(/\n/, $data) ;
                </programlisting>
            </listitem>
            
            <listitem>
                <para>
                    <code language="perl">BEGIN</code> Les blocks ne fonctionneront pas comme vous l'attendez. Il vaut mieux les
                    éviter.
                </para>
            </listitem>
            
            <listitem>
                <para>Assurez-vous de la parfaite propreté du code à la compilation, comme par
                    exemple
                </para>
                <itemizedlist>
                    <listitem>
                        <para>utilisez use strict 
                        </para>
                    </listitem>
                    <listitem>
                        <para>utilisez perl -w (les autres paramètres (notamment T) ne sont d'aucune aide) </para>
                    </listitem>
                    <listitem>
                        <para>utilisez perl -c 
                        </para>
                    </listitem>
                </itemizedlist>
            </listitem>
            <listitem>
                <para>Evitez les variables de portée lexicale (my) déclarées globalement comme
                    moyen de passer des <emphasis role='underline'>variable</emphasis> aux
                    fonctions. En fait ceci est <emphasis role='underline'>fatal</emphasis> si
                    la fonction est appelée par le plugin plus d'une fois lorsque le contrôle
                    est exécuté. Ces fonctions se comportent comme des encapsulations [closures]
                    qui verrouillent les variables lexicales globales sur leur première valeur
                    lors des appels suivants à la fonction. Si toutefois votre variable globale
                    est en lecture seule (une structure de données complexe par exemple), ce
                    n'est pas un problème. Ce que Bekman <ulink
url='http://perl.apache.org/docs/1.0/guide/'>recommande en
                        remplacement
                    </ulink>
                    est une des solutions suivantes :
                </para>
                <itemizedlist>
                    <listitem>
                        <para>faites une fonction anonyme et appelez-la à travers une référence au code,
                            par exemple :
                        </para>
                        <programlisting><![CDATA[remplacez ceci        par 

    my $x = 1 ;          my $x = 1 ;
    sub a { .. Process $x … }  $a_cr = sub { … Process $x … } ;
    .               .
    .               .
    a ;              &$a_cr ;
    $x = 2            $x = 2 ;
    a ;              &$a_cr ;

    # les encapsulations anonymes reprennent __toujours__ la valeur lexicale courante
    ]]></programlisting>
                    </listitem>
                    <listitem>
                        <para>mettez la variable globale et la fonction qui l'utilise dans leur propre
                            paquetage [package] (comme objet ou module) 
                        </para>
                    </listitem>
                    <listitem>
                        <para>passez les variables aux fonctions comme références ou alias (\$lex_var or
                            $_[n])
                        </para>
                    </listitem>
                    <listitem>
                        <para>remplacez les variables lexicales par des variables globales au paquetage et
                            excluez les des objections faites par 'use strict' en déclarant 'use vars
                            qw(global1 global2 ..)'
                        </para>
                    </listitem>
                </itemizedlist>
            </listitem>
            <listitem>
                <para>Sachez où trouvez plus d'informations.</para>
                
                <para>Vous pouvez obtenir des informations utiles des indices habituels (les
                    livres O'Reilly, plus <emphasis>Object Oriented Perl</emphasis> de Damien Conways)
                    mais pour les bonnes réponses dans ce contexte commencez par le guide du
                    mod_perl de Stas Bekman sur <ulink
url="http://perl.apache.org/guide/">http://perl.apache.org/guide/</ulink>.
                </para>
                
                <para> Ce document merveilleux au format livre n'a strictement rien à voir avec
                    Nagios, mais tout à voir avec l'écriture de programmes pour l'interpréteur
                    Perl intégré à Apache (par exemple le mod_perl de Doug MacEachern).
                </para>
                
                <para>
                    La page <emphasis>man</emphasis> perlembed est essentielle pour le contexte et les
                    encouragements.
                </para>
                
                <para>Si l'on considère que Lincoln Stein et Doug MacEachern savent deux-trois
                    choses sur Perl et l'intégration de Perl, leur livre <emphasis>Writing Apache
                        Modules with Perl and C
                    </emphasis>
                    vaut certainement d'être lu. 
                </para>
            </listitem>
            
            <listitem>
                <para>Sachez que votre plugin peut retourner d'étranges valeurs avec ePN, et que
                    cela est probablement dû au point 4 ci-dessus.
                </para>
            </listitem>
            
            <listitem>
                <para>Soyez prêt à déboguer en :</para>
                <itemizedlist>
                    <listitem>
                        <para>ayant un ePN de test 
                        </para>
                    </listitem>
                    <listitem>
                        <para>ajoutant des instructions print à votre plugin pour afficher la valeur des
                            variables sur STDERR (STDOUT ne peut pas être utilisé) 
                        </para>
                    </listitem>
                    <listitem>
                        <para>ajoutant des instructions print à p1.pl pour afficher ce qu'ePN pense qu'est
                            votre plugin avant d'essayer de le lancer (vi) 
                        </para>
                    </listitem>
                    <listitem>
                        <para>lançant l'ePN en avant-plan (probablement en conjonction avec les
                            recommandations précédentes) 
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            utilisant le module <emphasis>Deparse</emphasis> sur votre plugin pour voir
                            comment l'analyseur syntaxique l'a optimisé, et ce que l'interpréteur reçoit
                            réellement (voir <emphasis>Constants in Perl</emphasis> de Sean M. Burke, The Perl
                            Journal, automne 2001) 
                        </para>
                        <screen>perl -MO::Deparse &lt;votre_programme&gt;</screen>
                    </listitem>
                </itemizedlist>
            </listitem>
            
            <listitem>
                <para>Sachez qu'ePN transforme votre plugin lui aussi, et si tout le reste a
                    échoué essayez de déboguer la version transformée.
                </para>
                
                <para>Comme vous pouvez le constater ci-dessous p1.pl réécrit votre plugin comme
                    une fonction appelé 'hndlr' dans le paquetage nommé
                    <emphasis>Embed::&lt;quelque-chose-ayant-rapport-avec-le-nom-de-fichier-de-votre-plugin&gt;</emphasis>.
                </para>
                
                <para>Votre plugin attend peut-être des paramètres de la ligne de commande dans
                    @ARGV, donc pl.pl assigne également @_ à @ARGV. 
                </para>
                
                <para>
                    Ceci à son tour est évalué et si <emphasis>eval</emphasis> remonte une erreur
                    (qu'elle soit syntaxique ou d'exécution), le plugin est jeté dehors. 
                </para>
                
                <para>La copie d'écran suivante montre comment un ePN de test a transformé le
                    plugin &plugin-rpc; avant d'essayer de l'exécuter. Seule une petite partie
                    du code du plugin est montrée ici, car nous ne nous intéressons qu'aux
                    transformations que l'ePN lui fait subir). Les transformations sont
                    affichées en rouge : 
                </para>
                
                <programlisting>
package main;
use subs 'CORE::GLOBAL::exit';
sub CORE::GLOBAL::exit { die "ExitTrap: $_[0] (Embed::check_5frpc)"; }
package Embed::check_5frpc; sub hndlr { shift(@_);
@ARGV=@_;
#! /usr/bin/perl -w
#
# check_rpc plugin for Nagios
#
# usage:
#    check_rpc host service
#
# Check if an rpc serice is registered and running
# using rpcinfo - $proto $host $prognum 2&gt;&amp;1 |";
#
# Use these hosts.cfg entries as examples
#
# command[check_nfs]=/some/path/libexec/check_rpc $HOSTADDRESS$ nfs
# service[check_nfs]=NFS;24x7;3;5;5;unix-admin;60;24x7;1;1;1;;check_rpc
#
# initial version: 3 May 2000 by Truongchinh Nguyen and Karl DeBisschop
# current status: $Revision: 1.19 $
#
# Copyright Notice: GPL
#
… rest of plugin code goes here (it was removed for brevity) …
}
                </programlisting>
            </listitem>
            
            <listitem>
                <para>
                    Ne pas utiliser <emphasis>use diagnostics</emphasis> dans un plugin lancé par
                    votre ePN de production. Je pense qu'il force la valeur de retour à CRITICAL
                    dans tous les plugins Perl.
                </para>
            </listitem>
            
            <listitem>
                <para>Envisagez l'utilisation d'un mini Perl intégré pour vérifier votre
                    plugin. Cela ne suffit pas à valider votre plugin avec l'ePN, mais si le
                    plugin échoue à ce test il échouera également avec l'ePN. Un exemple de mini
                    ePN est inclus dans le répertoire <filename
class="directory">contrib/</filename> de la distribution de Nagios à cette
                    fin. Placez-vous dans le répertoire <filename class="directory">contrib/</filename> et tapez <command>make
                        mini_epn
                    </command>
                    pour le compiler. Il doit être exécuté depuis le
                    répertoire où se trouve <filename>p1.pl</filename> (ce fichier est distribué avec Nagios). 
                </para>
            </listitem>
        </orderedlist>
    </section>
</chapter>

