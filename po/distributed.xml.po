# French translations for docnagios package
# Copyright (C) 2009 Free Software Foundation, Inc.
# This file is distributed under the same license as the docnagios package.
# Automatically generated, 2009.
#
msgid ""
msgstr ""
"Project-Id-Version: docnagios 3\n"
"POT-Creation-Date: 2009-01-06 15:00+0100\n"
"PO-Revision-Date: 2009-01-06 15:00+0100\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

# type: Content of: <chapter><section><title>
#: GettingStarted/monitoring-windows.xml:45
#: GettingStarted/monitoring-linux.xml:43
#: GettingStarted/monitoring-netware.xml:12
#: GettingStarted/monitoring-printers.xml:26
#: GettingStarted/monitoring-routers.xml:23
#: GettingStarted/monitoring-publicservices.xml:22
#: ConfiguringNagios/config.xml:13 ConfiguringNagios/objectdefinitions.xml:13
#: ConfiguringNagios/customobjectvars.xml:12 ConfiguringNagios/cgiauth.xml:14
#: TheBasics/plugins.xml:13 TheBasics/hostchecks.xml:12
#: TheBasics/servicechecks.xml:12 TheBasics/activechecks.xml:13
#: TheBasics/passivechecks.xml:14 TheBasics/statetypes.xml:13
#: TheBasics/timeperiods.xml:15 TheBasics/networkreachability.xml:14
#: TheBasics/notifications.xml:13 TheBasics/cgis.xml:13
#: AdvancedTopics/extcommands.xml:12 AdvancedTopics/eventhandlers.xml:12
#: AdvancedTopics/volatileservices.xml:13 AdvancedTopics/freshness.xml:12
#: AdvancedTopics/distributed.xml:12 AdvancedTopics/redundancy.xml:13
#: AdvancedTopics/redundancy.xml:72 AdvancedTopics/redundancy.xml:433
#: AdvancedTopics/flapping.xml:14 AdvancedTopics/escalations.xml:13
#: AdvancedTopics/oncallrotation.xml:12 AdvancedTopics/clusters.xml:12
#: AdvancedTopics/dependencies.xml:12 AdvancedTopics/stalking.xml:13
#: AdvancedTopics/perfdata.xml:13 AdvancedTopics/downtime.xml:12
#: AdvancedTopics/embeddedperl.xml:12 AdvancedTopics/adaptive.xml:13
#: AdvancedTopics/dependencychecks.xml:12 AdvancedTopics/cachedchecks.xml:12
#: AdvancedTopics/passivestatetranslation.xml:14
#: AdvancedTopics/cgiincludes.xml:12 AdvancedTopics/objectinheritance.xml:13
#: AdvancedTopics/objecttricks.xml:16
#: SecurityAndPerformanceTuning/cgisecurity.xml:13
#: SecurityAndPerformanceTuning/tuning.xml:14
#: SecurityAndPerformanceTuning/faststartup.xml:14
#: SecurityAndPerformanceTuning/largeinstalltweaks.xml:12
#: SecurityAndPerformanceTuning/nagiostats.xml:12
#: SecurityAndPerformanceTuning/mrtggraphs.xml:14
#: IntegrationWithOtherSoftware/integration.xml:12
#: IntegrationWithOtherSoftware/int-snmptrap.xml:14
#: IntegrationWithOtherSoftware/int-tcpwrappers.xml:14
#: NagiosAddons/addons.xml:13 Development/epnplugins.xml:14
msgid "Introduction"
msgstr ""

# type: Content of: <chapter><title>
#: AdvancedTopics/distributed.xml:10
msgid "Distributed Monitoring"
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:13
msgid ""
"Nagios can be configured to support distributed monitoring of network "
"services and resources. I'll try to briefly explan how this can be "
"accomplished..."
msgstr ""

# type: Content of: <chapter><section><section><title>
#: AdvancedTopics/distributed.xml:17 AdvancedTopics/redundancy.xml:82
#: AdvancedTopics/redundancy.xml:440
msgid "Goals"
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:18
msgid ""
"The goal in the distributed monitoring environment that I will describe is "
"to offload the overhead (CPU usage, etc.) of performing service checks from "
"a \"central\" server onto one or more \"distributed\" servers. Most small to "
"medium sized shops will not have a real need for setting up such an "
"environment. However, when you want to start monitoring hundreds or even "
"thousands of hosts (and several times that many services)  using Nagios, "
"this becomes quite important."
msgstr ""

# type: Content of: <chapter><section><title>
#: AdvancedTopics/distributed.xml:26
msgid "Reference Diagram"
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:27
msgid ""
"The diagram below should help give you a general idea of how distributed "
"monitoring works with Nagios. I'll be referring to the items shown in the "
"diagram as I explain things..."
msgstr ""

# type: Content of: <chapter><section><title>
#: AdvancedTopics/distributed.xml:40
msgid "Central Server vs. Distributed Servers"
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:41
msgid ""
"When setting up a distributed monitoring environment with Nagios, there are "
"differences in the way the central and distributed servers are configured. "
"I'll show you how to configure both types of servers and explain what "
"effects the changes being made have on the overall monitoring. For starters, "
"lets describe the purpose of the different types of servers..."
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:45
msgid ""
"The function of a distributed server is to actively perform checks all the "
"services you define for a \"cluster\" of hosts. I use the term \"cluster\" "
"loosely - it basically just mean an arbitrary group of hosts on your "
"network. Depending on your network layout, you may have several cluters at "
"one physical location, or each cluster may be separated by a WAN, its own "
"firewall, etc.  The important thing to remember to that for each cluster of "
"hosts (however you define that), there is one distributed server that runs "
"Nagios and monitors the services on the hosts in the cluster.  A distributed "
"server is usually a bare-bones installation of Nagios. It doesn't have to "
"have the web interface installed, send out notifications, run event handler "
"scripts, or do anything other than execute service checks if you don't want "
"it to. More detailed information on configuring a distributed server comes "
"later..."
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:55
msgid ""
"The purpose of the central server is to simply listen for service check "
"results from one or more distributed servers. Even though services are "
"occassionally actively checked from the central server, the active checks "
"are only performed in dire circumstances, so lets just say that the central "
"server only accepts passive check for now. Since the central server is "
"obtaining <link linkend=\"thebasics-passivechecks\">passive service check</"
"link> results from one or more distributed servers, it serves as the focal "
"point for all monitoring logic (i.e. it sends out notifications, runs event "
"handler scripts, determines host states, has the web interface installed, "
"etc)."
msgstr ""

# type: Content of: <chapter><section><title>
#: AdvancedTopics/distributed.xml:64
msgid "Obtaining Service Check Information From Distributed Monitors"
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:65
msgid ""
"Okay, before we go jumping into configuration detail we need to know how to "
"send the service check results from the distributed servers to the central "
"server. I've already discussed how to submit passive check results to Nagios "
"from same host that Nagios is running on (as described in the documentation "
"on <link linkend=\"thebasics-passivechecks\">passive checks</link>), but I "
"haven't given any info on how to submit passive check results from other "
"hosts."
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:70
msgid ""
"In order to facilitate the submission of passive check results to a remote "
"host, I've written the <link linkend=\"nagiosaddons-addons-nsca\">nsca "
"addon</link>. The addon consists of two pieces. The first is a client "
"program (send_nsca) which is run from a remote host and is used to send the "
"service check results to another server. The second piece is the nsca daemon "
"(nsca) which either runs as a standalone daemon or under inetd and listens "
"for connections from client programs. Upon receiving service check "
"information from a client, the daemon will sumbit the check information to "
"Nagios (on the central server) by inserting a PROCESS_SVC_CHECK_RESULT "
"command into the <link linkend=\"configuringnagios-configmain-command_file"
"\">external command file</link>, along with the check results.  The next "
"time Nagios checks for <link linkend=\"advancedtopics-extcommands\">external "
"commands</link>, it will find the passive service check information that was "
"sent from the distributed server and process it. Easy, huh?"
msgstr ""

# type: Content of: <chapter><section><title>
#: AdvancedTopics/distributed.xml:83
msgid "Distributed Server Configuration"
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:84
msgid ""
"So how exactly is Nagios configured on a distributed server? Basically, its "
"just a bare-bones installation. You don't need to install the web interface "
"or have notifications sent out from the server, as this will all be handled "
"by the central server."
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:87
msgid "Key configuration changes:"
msgstr ""

# type: Content of: <chapter><section><itemizedlist><listitem><para>
#: AdvancedTopics/distributed.xml:90
msgid ""
"Only those services and hosts which are being monitored directly by the "
"distributed server are defined in the <link linkend=\"configuringnagios-"
"configobject\">object configuration file</link>."
msgstr ""

# type: Content of: <chapter><section><itemizedlist><listitem><para>
#: AdvancedTopics/distributed.xml:95
msgid ""
"The distributed server has its <link linkend=\"configuringnagios-configmain-"
"enable_notifications\">enable_notifications</link> directive set to 0. This "
"will prevent any notifications from being sent out by the server."
msgstr ""

# type: Content of: <chapter><section><itemizedlist><listitem><para>
#: AdvancedTopics/distributed.xml:99
msgid ""
"The distributed server is configured to <link linkend=\"configuringnagios-"
"configmain-obsess_over_services\">obsess over services</link>."
msgstr ""

# type: Content of: <chapter><section><itemizedlist><listitem><para>
#: AdvancedTopics/distributed.xml:102
msgid ""
"The distributed server has an <link linkend=\"configuringnagios-configmain-"
"ocsp_command\">ocsp command</link> defined (as described below)."
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:105
msgid ""
"In order to make everything come together and work properly, we want the "
"distributed server to report the results of all service checks to Nagios. We "
"could use <link linkend=\"advancedtopics-eventhandlers\">event handlers</"
"link> to report changes in the state of a service, but that just doesn't cut "
"it. In order to force the distributed server to report all service check "
"results, you must enable the <link linkend=\"configuringnagios-configmain-"
"obsess_over_services\">obsess_over_services</link> option in the main "
"configuration file and provide a <link linkend=\"configuringnagios-"
"configmain-ocsp_command\">ocsp_command</link> to be run after every service "
"check. We will use the ocsp command to send the results of all service "
"checks to the central server, making use of the send_nsca client and nsca "
"daemon (as described above) to handle the tranmission."
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:113
msgid ""
"In order to accomplish this, you'll need to define an ocsp command like this:"
msgstr ""

# type: Content of: <chapter><section><programlisting>
#: AdvancedTopics/distributed.xml:114
#, no-wrap
msgid "ocsp_command=submit_check_result"
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:115
msgid ""
"The command definition for the <filename>submit_check_result</filename> "
"command looks something like this:"
msgstr ""

# type: Content of: <chapter><section><programlisting>
#: AdvancedTopics/distributed.xml:116
#, no-wrap
msgid ""
"\n"
"\t\tdefine command{\n"
"\t\t        command_name    submit_check_result\n"
"\t\t        command_line    /usr/local/nagios/libexec/eventhandlers/submit_check_result $HOSTNAME$ '$SERVICEDESC$' $SERVICESTATE$ '$SERVICEOUTPUT$'\n"
"\t\t        }\n"
"\t\t"
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:122
msgid ""
"The <command>submit_check_result</command> shell scripts looks something "
"like this (replace central_server with the IP address of the central server):"
msgstr ""

# type: Content of: <chapter><section><programlisting>
#: AdvancedTopics/distributed.xml:124
#, no-wrap
msgid ""
"\n"
"\t\t        #!/bin/sh\n"
"\n"
"\t\t        # Arguments:\n"
"\t\t        #  $1 = host_name (Short name of host that the service is\n"
"\t\t        #       associated with)\n"
"\t\t        #  $2 = svc_description (Description of the service)\n"
"\t\t        #  $3 = state_string (A string representing the status of\n"
"\t\t        #       the given service - \"OK\", \"WARNING\", \"CRITICAL\"\n"
"\t\t        #       or \"UNKNOWN\")\n"
"\t\t        #  $4 = plugin_output (A text string that should be used\n"
"\t\t        #       as the plugin output for the service checks)\n"
"\t\t        #\n"
"\n"
"\t\t        # Convert the state string to the corresponding return code\n"
"\t\t        return_code=-1\n"
"\n"
"\t\t        case \"$3\" in\n"
"\t\t            OK)\n"
"\t\t                        return_code=0\n"
"\t\t                    ;;\n"
"\t\t                WARNING)\n"
"\t\t                    return_code=1\n"
"\t\t                        ;;\n"
"\t\t                CRITICAL)\n"
"\t\t                    return_code=2\n"
"\t\t                        ;;\n"
"\t\t                UNKNOWN)\n"
"\t\t                    return_code=-1\n"
"\t\t                        ;;\n"
"\t\t        esac\n"
"\n"
"\t\t        # pipe the service check info into the send_nsca program, which\n"
"\t\t        # in turn transmits the data to the nsca daemon on the central\n"
"\t\t        # monitoring server\n"
"\n"
"\t\t        /bin/printf \"%s\\t%s\\t%s\\t%s\\n\" \"$1\" \"$2\" \"$return_code\" \"$4\" | /usr/local/nagios/bin/send_nsca -H <replaceable>central_server</replaceable> -c /usr/local/nagios/etc/send_nsca.cfg\n"
"\t\t"
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:162
msgid ""
"The script above assumes that you have the send_nsca program and it "
"configuration file (<filename>send_nsca.cfg</filename>)  located in the "
"<filename class=\"directory\">/usr/local/nagios/bin/</filename> and "
"<filename class=\"directory\">/usr/local/nagios/etc/</filename> directories, "
"respectively."
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:165
msgid ""
"That's it! We've sucessfully configured a remote host running Nagios to act "
"as a distributed monitoring server.  Let's go over exactly what happens with "
"the distributed server and how it sends service check results to Nagios (the "
"steps outlined below correspond to the numbers in the reference diagram "
"above):"
msgstr ""

# type: Content of: <chapter><section><orderedlist><listitem><para>
#: AdvancedTopics/distributed.xml:170
msgid ""
"After the distributed server finishes executing a service check, it executes "
"the command you defined by the <link linkend=\"configuringnagios-configmain-"
"ocsp_command\">ocsp_command</link> variable. In our example, this is the "
"<filename>/usr/local/nagios/libexec/eventhandlers/submit_check_result</"
"filename> script. Note that the definition for the "
"<filename>submit_check_result</filename> command passed four pieces of "
"information to the script: the name of the host the service is associated "
"with, the service description, the return code from the service check, and "
"the plugin output from the service check."
msgstr ""

# type: Content of: <chapter><section><orderedlist><listitem><para>
#: AdvancedTopics/distributed.xml:178
msgid ""
"The <filename>submit_check_result</filename> script pipes the service check "
"information (host name, description, return code, and output) to the "
"<command>send_nsca</command> program."
msgstr ""

# type: Content of: <chapter><section><orderedlist><listitem><para>
#: AdvancedTopics/distributed.xml:182
msgid ""
"The send_nsca program transmits the service check information to the nsca "
"daemon on the central monitoring server."
msgstr ""

# type: Content of: <chapter><section><orderedlist><listitem><para>
#: AdvancedTopics/distributed.xml:186
msgid ""
"The nsca daemon on the central server takes the service check information "
"and writes it to the external command file for later pickup by Nagios."
msgstr ""

# type: Content of: <chapter><section><orderedlist><listitem><para>
#: AdvancedTopics/distributed.xml:190
msgid ""
"The Nagios process on the central server reads the external command file and "
"processes the passive service check information that originated from the "
"distributed monitoring server."
msgstr ""

# type: Content of: <chapter><section><title>
#: AdvancedTopics/distributed.xml:196
msgid "Central Server Configuration"
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:197
msgid ""
"We've looked at how distributed monitoring servers should be configured, so "
"let's turn to the central server. For all intensive purposes, the central is "
"configured as you would normally configure a standalone server. It is setup "
"as follows:"
msgstr ""

# type: Content of: <chapter><section><itemizedlist><listitem><para>
#: AdvancedTopics/distributed.xml:202
msgid ""
"The central server has the web interface installed (optional, but "
"recommended)"
msgstr ""

# type: Content of: <chapter><section><itemizedlist><listitem><para>
#: AdvancedTopics/distributed.xml:205
msgid ""
"The central server has its <link linkend=\"configuringnagios-configmain-"
"enable_notifications\">enable_notifications</link> directive set to 1. This "
"will enable notifications. (optional, but recommended)"
msgstr ""

# type: Content of: <chapter><section><itemizedlist><listitem><para>
#: AdvancedTopics/distributed.xml:209
msgid ""
"The central server has <link linkend=\"configuringnagios-configmain-"
"execute_service_checks\">active service checks</link> disabled (optional, "
"but recommended - see notes below)"
msgstr ""

# type: Content of: <chapter><section><itemizedlist><listitem><para>
#: AdvancedTopics/distributed.xml:213
msgid ""
"The central server has <link linkend=\"configuringnagios-configmain-"
"check_external_commands\">external command checks</link> enabled (required)"
msgstr ""

# type: Content of: <chapter><section><itemizedlist><listitem><para>
#: AdvancedTopics/distributed.xml:217
msgid ""
"The central server has <link linkend=\"configuringnagios-configmain-"
"accept_passive_service_checks\">passive service checks</link> enabled "
"(required)"
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:221
msgid ""
"There are three other very important things that you need to keep in mind "
"when configuring the central server:"
msgstr ""

# type: Content of: <chapter><section><itemizedlist><listitem><para>
#: AdvancedTopics/distributed.xml:225
msgid ""
"The central server must have service definitions for all services that are "
"being monitored by all the distributed servers. Nagios will ignore passive "
"check results if they do not correspond to a service that has been defined."
msgstr ""

# type: Content of: <chapter><section><itemizedlist><listitem><para>
#: AdvancedTopics/distributed.xml:230
msgid ""
"If you're only using the central server to process services whose results "
"are going to be provided by distributed hosts, you can simply disable all "
"active service checks on a program-wide basis by setting the <link linkend="
"\"configuringnagios-configmain-execute_service_checks"
"\">execute_service_checks</link> directive to 0. If you're using the central "
"server to actively monitor a few services on its own (without the aid of "
"distributed servers), the <varname>enable_active_checks</varname> option of "
"the defintions for service being monitored by distributed servers should be "
"set to 0.  This will prevent Nagios from actively checking those services."
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:239
msgid ""
"It is important that you either disable all service checks on a program-wide "
"basis or disable the <varname>enable_active_checks</varname> option in the "
"definitions for each service that is monitored by a distributed server. This "
"will ensure that active service checks are never executed under normal "
"circumstances. The services will keep getting rescheduled at their normal "
"check intervals (3 minutes, 5 minutes, etc...), but the won't actually be "
"executed. This rescheduling loop will just continue all the while Nagios is "
"running. I'll explain why this is done in a bit..."
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:245
msgid "That's it! Easy, huh?"
msgstr ""

# type: Content of: <chapter><section><title>
#: AdvancedTopics/distributed.xml:248
msgid "Problems With Passive Checks"
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:249
msgid ""
"For all intensive purposes we can say that the central server is relying "
"solely on passive checks for monitoring. The main problem with relying "
"completely on passive checks for monitoring is the fact that Nagios must "
"rely on something else to provide the monitoring data. What if the remote "
"host that is sending in passive check results goes down or becomes "
"unreachable? If Nagios isn't actively checking the services on the host, how "
"will it know that there is a problem?"
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:254
msgid "Fortunately, there is a way we can handle these types of problems..."
msgstr ""

# type: Content of: <chapter><section><title>
#: AdvancedTopics/distributed.xml:257
msgid "Freshness Checking"
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:258
msgid ""
"Nagios supports a feature that does <quote>freshness</quote> checking on the "
"results of service checks. More information freshness checking can be found "
"<link linkend=\"advancedtopics-freshness\">here</link>.  This features gives "
"some protection against situations where remote hosts may stop sending "
"passive service checks into the central monitoring server. The purpose of "
"<quote>freshness</quote> checking is to ensure that service checks are "
"either being provided passively by distributed servers on a regular basis or "
"performed actively by the central server if the need arises. If the service "
"check results provided by the distributed servers get <quote>stale</quote>, "
"Nagios can be configured to force active checks of the service from the "
"central monitoring host."
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:266
msgid ""
"So how do you do this? On the central monitoring server you need to "
"configure services that are being monitoring by distributed servers as "
"follows..."
msgstr ""

# type: Content of: <chapter><section><itemizedlist><listitem><para>
#: AdvancedTopics/distributed.xml:270
msgid ""
"The <varname>check_freshness</varname> option in the service definitions "
"should be set to 1.  This enables <quote>freshness</quote> checking for the "
"services."
msgstr ""

# type: Content of: <chapter><section><itemizedlist><listitem><para>
#: AdvancedTopics/distributed.xml:274
msgid ""
"The <varname>freshness_threshold</varname> option in the service definitions "
"should be set to a value (in seconds) which reflects how \"fresh\" the "
"results for the services (provided by the distributed servers) should be."
msgstr ""

# type: Content of: <chapter><section><itemizedlist><listitem><para>
#: AdvancedTopics/distributed.xml:279
msgid ""
"The <varname>check_command</varname> option in the service definitions "
"should reflect valid commands that can be used to actively check the service "
"from the central monitoring server."
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:283
msgid ""
"Nagios periodically checks the <quote>freshness</quote> of the results for "
"all services that have freshness checking enabled. The "
"<varname>freshness_threshold</varname> option in each service definition is "
"used to determine how \"fresh\" the results for each service should be. For "
"example, if you set this value to 300 for one of your services, Nagios will "
"consider the service results to be <quote>stale</quote> if they're older "
"than 5 minutes (300 seconds). If you do not specify a value for the "
"<varname>freshness_threshold</varname> option, Nagios will automatically "
"calculate a <quote>freshness</quote> threshold by looking at either the "
"<varname>normal_check_interval</varname> or <varname>retry_check_interval</"
"varname> options (depending on what <link linkend=\"thebasics-statetypes"
"\">type of state</link> the service is in). If the service results are found "
"to be <quote>stale</quote>, Nagios will run the service check command "
"specified by the <varname>check_command</varname> option in the service "
"definition, thereby actively checking the service."
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:292
msgid ""
"Remember that you have to specify a <varname>check_command</varname> option "
"in the service definitions that can be used to actively check the status of "
"the service from the central monitoring server. Under normal circumstances, "
"this check command is never executed (because active checks were disabled on "
"a program-wide basis or for the specific services). When freshness checking "
"is enabled, Nagios will run this command to actively check the status of the "
"service even if active checks are disabled on a program-wide or service-"
"specific basis."
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:297
msgid ""
"If you are unable to define commands to actively check a service from the "
"central monitoring host (or if turns out to be a major pain), you could "
"simply define all your services with the <varname>check_command</varname> "
"option set to run a dummy script that returns a critical status. Here's an "
"example... Let's assume you define a command called <varname>service-is-"
"stale</varname> and use that command name in the <varname>check_command</"
"varname> option of your services. Here's what the definition would look "
"like..."
msgstr ""

# type: Content of: <chapter><section><programlisting>
#: AdvancedTopics/distributed.xml:302
#, no-wrap
msgid ""
"\n"
"\t\tdefine command{\n"
"\t\t\tcommand_name    service-is-stale\n"
"\t\t\tcommand_line    /usr/local/nagios/libexec/check_dummy 2 \"CRITICAL: Service results are stale\"\n"
"\t\t\t}\n"
"\t\t"
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:308
msgid ""
"When Nagios detects that the service results are stale and runs the "
"<command>service-is-stale</command> command, the &plugin-dummy; plugin is "
"executed and the service will go into a critical state. This would likely "
"cause notifications to be sent out, so you'll know that there's a problem."
msgstr ""

# type: Content of: <chapter><section><title>
#: AdvancedTopics/distributed.xml:313
msgid "Performing Host Checks"
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:314
msgid ""
"At this point you know how to obtain service check results passivly from "
"distributed servers. This means that the central server is not actively "
"checking services on its own. But what about host checks ? You still need to "
"do them, so how ?"
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:317
msgid ""
"Since host checks usually compromise a small part of monitoring activity "
"(they aren't done unless absolutely necessary), I'd recommend that you "
"perform host checks actively from the central server. That means that you "
"define host checks on the central server the same way that you do on the "
"distributed servers (and the same way you would in a normal, non-distributed "
"setup)."
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:321
msgid ""
"Passive host checks are available (read <link linkend=\"thebasics-"
"passivechecks\">here</link>), so you could use them in your distributed "
"monitoring setup, but they suffer from a few problems. The biggest problem "
"is that Nagios does not translate passive host check problem states (DOWN "
"and UNREACHABLE) when they are processed. This means that if your monitoring "
"servers have a different parent/child host structure (and they will, if you "
"monitoring servers are in different locations), the central monitoring "
"server will have an inaccurate view of host states."
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:327
msgid ""
"If you do want to send passive host checks to a central server in your "
"distributed monitoring setup, make sure:"
msgstr ""

# type: Content of: <chapter><section><itemizedlist><listitem><para>
#: AdvancedTopics/distributed.xml:330
msgid ""
"The central server has <link linkend=\"configuringnagios-configmain-"
"accept_passive_host_checks\">passive host checks</link> enabled (required)"
msgstr ""

# type: Content of: <chapter><section><itemizedlist><listitem><para>
#: AdvancedTopics/distributed.xml:333
msgid ""
"The distributed server is configured to <link linkend=\"configuringnagios-"
"configmain-obsess_over_hosts\">obsess over hosts</link>."
msgstr ""

# type: Content of: <chapter><section><itemizedlist><listitem><para>
#: AdvancedTopics/distributed.xml:336
msgid ""
"The distributed server has an <link linkend=\"configuringnagios-configmain-"
"ochp_command\">ochp command</link> defined."
msgstr ""

# type: Content of: <chapter><section><para>
#: AdvancedTopics/distributed.xml:339
msgid ""
"The ochp command, which is used for processing host check results, works in "
"a similiar manner to the ocsp command, which is used for processing service "
"check results (see documentation above). In order to make sure passive host "
"check results are up to date, you'll want to enable <link linkend="
"\"advancedtopics-freshness\">freshness checking</link> for hosts (similiar "
"to what is described above for services)."
msgstr ""
