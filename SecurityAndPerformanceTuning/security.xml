<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd"
[
  <!ENTITY % all.entities SYSTEM "../all-entities.ent">
  %all.entities;
]
>
<chapter id="securityandperformancetuning-security"
         xreflabel="Security Considerations">
  <title>Security Considerations</title>

  <section>
    <title><anchor
    id="securityandperformancetuning-security-intro" />Introduction</title>

    <para><inlinemediaobject>
        <imageobject>
          <imagedata fileref="images/security.png" format="PNG"/>
        </imageobject>
      </inlinemediaobject> This is intended to be a brief overview of some
    things you should keep in mind when installing Nagios, so as set it up in
    a secure manner.</para>

    <para>Your monitoring box should be viewed as a backdoor into your other
    systems. In many cases, the Nagios server might be allowed access through
    firewalls in order to monitor remote servers. In most all cases, it is
    allowed to query those remote servers for various information. Monitoring
    servers are always given a certain level of trust in order to query remote
    systems. This presents a potential attacker with an attractive backdoor to
    your systems. An attacker might have an easier time getting into your
    other systems if they compromise the monitoring server first. This is
    particularly true if you are making use of shared &protocol-ssh; keys in order to
    monitor remote systems.</para>

    <para>If an intruder has the ability to submit check results or external
    commands to the Nagios daemon, they have the potential to submit bogus
    monitoring data, drive you nuts you with bogus notifications, or cause
    event handler scripts to be triggered. If you have event handler scripts
    that restart services, cycle power, etc. this could be particularly
    problematic.</para>

    <para>Another area of concern is the ability for intruders to sniff
    monitoring data (status information) as it comes across the wire. If
    communication channels are not encrypted, attackers can gain valuable
    information by watching your monitoring information. Take as an example
    the following situation: An attacker captures monitoring data on the wire
    over a period of time and analyzes the typical CPU and disk load usage of
    your systems, along with the number of users that are typically logged
    into them. The attacker is then able to determine the best time to
    compromise a system and use its resources (CPU, etc.) without being
    noticed.</para>

    <para>Here are some tips to help ensure that you keep your systems secure
    when implementing a Nagios-based monitoring solution...</para>
  </section>

  <section>
    <title><anchor
    id="securityandperformancetuning-security-bestpractices" />Best
    Practices</title>

    <orderedlist>
      <listitem>
        <para><emphasis role="bold">Use a Dedicated Monitoring Box</emphasis>.
        I would recommend that you install Nagios on a server that is
        dedicated to monitoring (and possibly other admin tasks). Protect your
        monitoring server as if it were one of the most important servers on
        your network. Keep running services to a minimum and lock down access
        to it via TCP wrappers, firewalls, etc. Since the Nagios server is
        allowed to talk to your servers and may be able to poke through your
        firewalls, allowing users access to your monitoring server can be a
        security risk. Remember, its always easier to gain root access through
        a system security hole if you have a local account on a box.
        <informalfigure>
        <mediaobject>
            <imageobject>
              <imagedata fileref="images/security3.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
		</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Don't Run Nagios As Root</emphasis>.
        Nagios doesn't need to run as root, so don't do it. You can tell
        Nagios to drop privileges after startup and run as another user/group
        by using the <link
        linkend="configuringnagios-configmain-nagios_user">nagios_user</link>
        and <link
        linkend="configuringnagios-configmain-nagios_group">nagios_group</link>
        directives in the main config file. If you need to execute event
        handlers or plugins which require root access, you might want to try
        using <ulink
        url="http://www.courtesan.com/sudo/sudo.html">sudo</ulink>.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Lock Down The Check Result
        Directory</emphasis>. Make sure that only the nagios user is able to
        read/write in the <link
        linkend="configuringnagios-configmain-check_result_path">check result
        path</link>. If users other than nagios (or root) are able to write to
        this directory, they could send fake host/service check results to the
        Nagios daemon. This could result in annoyances (bogus notifications)
        or security problems (event handlers being kicked off).</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Lock Down The External Command
        File</emphasis>. If you enable <xref
        linkend="advancedtopics-extcommands" />external commands, make sure
        you set proper permissions on the <filename
        class="directory">/usr/local/nagios/var/rw directory</filename>. You
        only want the Nagios user (usually nagios) and the web server user
        (usually nobody, httpd, apache2, or www-data) to have permissions to
        write to the command file. If you've installed Nagios on a machine
        that is dedicated to monitoring and admin tasks and is not used for
        public accounts, that should be fine. If you've installed it on a
        public or multi-user machine (not recommended), allowing the web
        server user to have write access to the command file can be a security
        problem. After all, you don't want just any user on your system
        controlling Nagios through the external command file. In this case, I
        would suggest only granting write access on the command file to the
        nagios user and using something like <ulink
        url="http://cgiwrap.sourceforge.net/">CGIWrap</ulink> to run the CGIs
        as the nagios user instead of nobody.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Require Authentication In The
        CGIs</emphasis>. I would strongly suggest requiring authentication for
        accessing the CGIs. Once you do that, read the documentation on the
        default rights that authenticated contacts have, and only authorize
        specific contacts for additional rights as necessary. Instructions on
        setting up authentication and configuring authorization rights can be
        found <xref linkend="configuringnagios-cgiauth" />here. If you disable
        the CGI authentication features using the <link
        linkend="configuringnagios-configcgi-use_authentication">use_authentication</link>
        directive in the CGI config file, the <link
        linkend="thebasics-cgis-cmd_cgi">command CGI</link> will refuse to
        write any commands to the <link
        linkend="configuringnagios-configmain-command_file">external command
        file</link>. After all, you don't want the world to be able to control
        Nagios do you?</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Implement Enhanced CGI Security
        Measures</emphasis>. I would strongly suggest that you consider
        implementing enhanced security measures for the CGIs as described
        <link linkend="securityandperformancetuning-cgisecurity">here</link>. These measures can help ensure that the username/password you
        use to access the Nagios web interface are not intercepted by third
        parties.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Use Full Paths In Command
        Definitions</emphasis>. When you define commands, make sure you
        specify the full path (not a relative one) to any scripts or binaries
        you're executing.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Hide Sensitive Information With
        <varname>$USERn$</varname> Macros</emphasis>. The CGIs read the <xref
        linkend="configuringnagios-configmain" />main config file and <xref
        linkend="configuringnagios-configobject" />Object config file(s), so
        you don't want to keep any sensitive information (usernames,
        passwords, etc) in there. If you need to specify a username and/or
        password in a command definition use a <code>$USERn$</code> <xref
        linkend="thebasics-macros" />macro to hide it. <code>$USERn$</code>
        macros are defined in one or more <link
        linkend="configuringnagios-configmain-resource_file">resource
        files</link>. The CGIs will not attempt to read the contents of
        resource files, so you can set more restrictive permissions (600 or
        660) on them. See the sample <filename>resource.cfg</filename> file in
        the base of the Nagios distribution for an example of how to define
        $USERn$ macros.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Strip Dangerous Characters From
        Macros</emphasis>. Use the <link
        linkend="configuringnagios-configmain-illegal_macro_output_chars">illegal_macro_output_chars</link>
        directive to strip dangerous characters from the
        <code>$HOSTOUTPUT$</code>, <code>$SERVICEOUTPUT$</code>,
        <code>$HOSTPERFDATA$</code>, and <code>$SERVICEPERFDATA$</code> macros
        before they're used in notifications, etc. Dangerous characters can be
        anything that might be interpreted by the shell, thereby opening a
        security hole. An example of this is the presence of backtick (`)
        characters in the <code>$HOSTOUTPUT$</code>,
        <code>$SERVICEOUTPUT$</code>, <code>$HOSTPERFDATA$</code>, and/or
        <code>$SERVICEPERFDATA$</code> macros, which could allow an attacker
        to execute an arbitrary command as the nagios user (one good reason
        not to run Nagios as the root user).</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Secure Access to Remote Agents</emphasis>.
        Make sure you lock down access to agents (&name-nrpe;, NSClient, &protocol-snmp;, etc.)
        on remote systems using firewalls, access lists, etc. You don't want
        everyone to be able to query your systems for status information. This
        information could be used by an attacker to execute remote event
        handler scripts or to determine the best times to go unnoticed.
        <informalfigure>
        <mediaobject>
            <imageobject>
              <imagedata fileref="images/security1.png" format="PNG"/>
            </imageobject>
          </mediaobject>
          </informalfigure>
		</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Secure Communication Channels</emphasis>.
        Make sure you encrypt communication channels between different Nagios
        installations and between your Nagios servers and your monitoring
        agents whenever possible. You don't want someone to be able to sniff
        status information going across your network. This information could
        be used by an attacker to determine the best times to go unnoticed.
        <informalfigure>
		<mediaobject>
            <imageobject>
              <imagedata fileref="images/security2.png" format="PNG"/>
            </imageobject>
          </mediaobject>
          </informalfigure>
		</para>
      </listitem>
    </orderedlist>
  </section>
</chapter>
