<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd"
[
  <!ENTITY % all.entities SYSTEM "../all-entities.ent">
  %all.entities;
]
>
<chapter id="securityandperformancetuning-faststartup"
         xreflabel="Fast Startup Options">
  <title>Fast Startup Options</title>

  <section>
    <title>Introduction</title>

    <para>There are a few things you can do that can decrease the amount of
    time it take Nagios to startup (or restart). These speedups involve easing
    some of the burden involved in processing your configuration files.</para>

    <para>Using these techniques is particularly useful when you have one or
    more of the following:</para>

    <itemizedlist>
      <listitem>
        <para>Large configurations</para>
      </listitem>

      <listitem>
        <para>Complex configurations (heavy use of template features)</para>
      </listitem>

      <listitem>
        <para>Installations where frequest restarts are necessary</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Background</title>

    <para>Whenever Nagios starts/restarts it has to process your configuration
    files before it can get down to the business of monitoring. This
    configuration startup process involves a number of steps:</para>

    <itemizedlist>
      <listitem>
        <para>Reading the config files</para>
      </listitem>

      <listitem>
        <para>Resolving template definitions</para>
      </listitem>

      <listitem>
        <para>"Recombobulating" your objects (my term for the various types of
        work that occurs)</para>
      </listitem>

      <listitem>
        <para>Duplicating object definitions</para>
      </listitem>

      <listitem>
        <para>Inheriting object properties</para>
      </listitem>

      <listitem>
        <para>Sorting your object definitions</para>
      </listitem>

      <listitem>
        <para>Verifying object relationship integrity</para>
      </listitem>

      <listitem>
        <para>Checking for circular paths</para>
      </listitem>

      <listitem>
        <para>and more...</para>
      </listitem>
    </itemizedlist>

    <para>Some of these steps can be quite time-consuming when you have large
    or complex configurations. Is there a way to speed any of these steps up?
    Yes!</para>
  </section>

  <section>
    <title>Evaluating Startup Times</title>

    <para>Before we get on to making things faster, we need to see what's
    possible and whether or not we should even bother with the whole thing.
    This is easy to do - simply start nagios with the -s command line switch
    to get timing and scheduling information.</para>

    <para>An example of the output (abbreviated to only show relevant
    portions) is shown below. For this example, I'm using a Nagios config that
    has 25 hosts defined and just over 10,000 services. <screen>
<prompt>linux:~ # </prompt><userinput>/usr/local/nagios/bin/nagios -s /usr/local/nagios/etc/nagios.cfg</userinput>
</screen></para>

    <screen>
		Nagios 3.0-prealpha
		Copyright (c) 1999-2007 Ethan Galstad (http://www.nagios.org)
		Last Modified: 01-27-2007
		License: GPL

		Timing information on object configuration processing is listed
		below.  You can use this information to see if precaching your
		object configuration would be useful.

		Object Config Source: Config files (uncached)

		OBJECT CONFIG PROCESSING TIMES      (* = Potential for precache savings with -u option)
		----------------------------------
		Read:                 0.486780 sec
		Resolve:              0.004106 sec  *
		Recomb Contactgroups: 0.000077 sec  *
		Recomb Hostgroups:    0.000172 sec  *
		Dup Services:         0.028801 sec  *
		Recomb Servicegroups: 0.010358 sec  *
		Duplicate:            5.666932 sec  *
		Inherit:              0.003770 sec  *
		Recomb Contacts:      0.030085 sec  *
		Sort:                 2.648863 sec  *
		Register:             2.654628 sec
		Free:                 0.021347 sec
		                      ============
		TOTAL:                11.555925 sec  * = 8.393170 sec (72.63%) estimated savings
		
		
		Timing information on configuration verification is listed below.

		CONFIG VERIFICATION TIMES          (* = Potential for speedup with -x option)
		----------------------------------
		Object Relationships: 1.400807 sec
		Circular Paths:       54.676622 sec  *
		Misc:                 0.006924 sec
		                      ============
		TOTAL:                56.084353 sec  * = 54.676622 sec (97.5%) estimated savings
		</screen>

    <para>Okay, lets see what happened. Looking at the totals, it took roughly
    11.6 seconds to process the configuration files and another 56 seconds to
    verify the config. That means that every time I start or restart Nagios
    with this configuration, it will take nearly 68 seconds of startup work
    before it can monitor anything! That's not acceptable if I have to restart
    Nagios on a semi-regular basis.</para>

    <para>What can I do about this? Take another look at the output and you'll
    see that Nagios estimates that I could save about 8.4 seconds off the
    configuration processing time and another 54.7 off the verification times.
    In total, Nagios thinks I could save 63 seconds of the normal startup time
    if some optimizations were taken.</para>

    <para>Whoa! From 68 seconds to just 5 seconds? Yep, read on for how to do
    it.</para>
  </section>

  <section>
    <title>Pre-Caching Object Configuration</title>

    <para>Nagios can spend quite a bit of time parsing your config files,
    especially if you make use of the template features such as inheritance,
    etc. In order to reduce the time it takes to parse your config, you can
    have Nagios pre-process and pre-cache your config files for future
    use.</para>

    <informaltable frame="all">
      <tgroup cols="2">
        <tbody>
          <row>
            <entry><para>When you run nagios with the <option>-p</option>
            command line option, Nagios will read your config files in,
            process them, and save them to a pre-cached object config file
            (specified by the <link
            linkend="configuringnagios-configmain-precached_object_file">precached_object_file</link>
            directive). This pre-cached config file will contain pre-processed
            configuration entries that are easier/faster for Nagios to process
            in the future.</para> <para>You must use the <option>-p</option>
            command line option along with either the <option>-v</option> or
            <option>-s</option> command line options, as shown below. This
            ensures that your configuration is verified before the precached
            file is created.</para> <screen>
<prompt>linux:~ # </prompt><userinput>/usr/local/nagios/bin/nagios -pv /usr/local/nagios/etc/nagios.cfg</userinput>
</screen> <para>The size of your precached config file will most likely be
            significantly larger than the sum of the sizes of your object
            config files. This is normal and by design.</para></entry>

            <entry><para> <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="images/fast-startup1.png" format="PNG"/>
                </imageobject>
              </inlinemediaobject> </para></entry>
          </row>

          <row>
            <entry><para>Once the precached object configuration file have
            been created, you can start Nagios and tell it to use the
            precached config file instead of your object config file(s) by
            using the <option>-u</option> command line option. <screen>
<prompt>linux:~ # </prompt><userinput>/usr/local/nagios/bin/nagios -ud /usr/local/nagios/etc/nagios.cfg</userinput>
</screen></para> <important>
                <para>If you modify your configuration files, you will need to
                re-verify and re-cache your configuration files before
                restarting Nagios. If you don't re-generate the precached
                object file, Nagios will continue to use your old
                configuration because it is now reading from the precached
                file, rather than your source configuration files.</para>
              </important></entry>

            <entry><para> <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="images/fast-startup2.png" format="PNG"/>
                </imageobject>
              </inlinemediaobject> </para></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </section>

  <section>
    <title>Skipping Circular Path Tests</title>

    <para>The second (and most time-intensive) portion of the configuration
    startup phase is the circular path check. In the example above, it took
    nearly a minute to perform this step of the configuration
    verification.</para>

    <para>What is the circular path check and why does it take so long? The
    circular patch check is designed to ensure that you don't define any
    circular paths in your host, host dependency, or service dependency
    definitions. If a circular path existed in your config files, Nagios could
    end up in a deadlock situation. The most likely reason for the check
    taking so long is that I'm not using an efficient algorithm. A much more
    efficient algorithm for detecting circular paths would be most welcomed.
    Hint: That means all you CompSci graduate students who have been emailing
    me about doing your thesis on Nagios can contribute some code back.
    :-)</para>

    <para>If you want to skip the circular path check when Nagios starts, you
    can add the -x command line option like this: <screen>
<prompt>linux:~ # </prompt><userinput>/usr/local/nagios/bin/nagios -xd /usr/local/nagios/etc/nagios.cfg</userinput>
</screen></para>

    <important>
      <para>It is of utmost importance that you verify your configuration
      before starting/restarting Nagios when skipping circular path checks.
      Failure to do so could lead to deadlocks in the Nagios logic. You have
      been warned.</para>
    </important>
  </section>

  <section>
    <title>Putting It All Together</title>

    <para>Follow these steps if you want to make use of potential speedups
    from pre-caching your configuration and skipping circular path
    checks.</para>

    <procedure>
      <step>
        <para>Verify your configuration and create the precache file with the
        following command: <screen>
<prompt>linux:~ # </prompt><userinput>/usr/local/nagios/bin/nagios -vp /usr/local/nagios/etc/nagios.cfg</userinput>
</screen></para>
      </step>

      <step>
        <para>Stop Nagios if it is currently running.</para>
      </step>

      <step>
        <para>Start Nagios like so to use the precached config file and skip
        circular path checks: <screen>
<prompt>linux:~ # </prompt><userinput>/usr/local/nagios/bin/nagios -uxd /usr/local/nagios/etc/nagios.cfg</userinput>
</screen></para>
      </step>

      <step>
        <para>When you modify your original configuration files in the future
        and need to restart Nagios to make those changes take place, repeat
        step 1 to re-verify your config and regenerate your cached config
        file. Once that is done you can restart Nagios through the web
        interface or by sending a SIGHUP signal. If you don't re-generate the
        precached object file, Nagios will continue to use your old
        confguration because it is now reading from the precached file, rather
        than your source configuration files.</para>
      </step>

      <step>
        <para>That's it! Enjoy the increased startup speed.</para>
      </step>
    </procedure>
  </section>
</chapter>
